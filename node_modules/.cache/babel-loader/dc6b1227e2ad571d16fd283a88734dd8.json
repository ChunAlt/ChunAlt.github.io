{"ast":null,"code":"import _classCallCheck from\"C:/Users/Chun/ChunAlt.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/Chun/ChunAlt.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"C:/Users/Chun/ChunAlt.github.io/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"C:/Users/Chun/ChunAlt.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/Chun/ChunAlt.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from'react';import SupportCard from'./SupportCard';import events from'../card-events';import{supportCardProperties}from'../constants';import Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ordinal=[\"1st\",\"2nd\",\"3rd\",\"4th\",\"5th\",\"6th\",\"7th\"];var type_names=[\"Speed\",\"Stamina\",\"Power\",\"Guts\",\"Wisdom\",\"\",\"Friend\"];var TierList=/*#__PURE__*/function(_React$Component){_inherits(TierList,_React$Component);var _super=_createSuper(TierList);function TierList(props){var _this;_classCallCheck(this,TierList);_this=_super.call(this,props);_this.state={dropdownSelections:[\"none\",\"none\",\"none\"]};_this.onDropdown1Changed=_this.onDropdown1Changed.bind(_assertThisInitialized(_this));_this.onDropdown2Changed=_this.onDropdown2Changed.bind(_assertThisInitialized(_this));_this.onDropdown3Changed=_this.onDropdown3Changed.bind(_assertThisInitialized(_this));return _this;}//lmao\n_createClass(TierList,[{key:\"onDropdown1Changed\",value:function onDropdown1Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[0]=newValue.value;console.log(newValue);this.setState({dropdownSelections:newSelections});}},{key:\"onDropdown2Changed\",value:function onDropdown2Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[1]=newValue.value;this.setState({dropdownSelections:newSelections});}},{key:\"onDropdown3Changed\",value:function onDropdown3Changed(newValue){var newSelections=this.state.dropdownSelections.slice();newSelections[2]=newValue.value;this.setState({dropdownSelections:newSelections});}},{key:\"render\",value:function render(){var _this2=this;var cards=this.props.cards;var selectedNames=this.props.selectedCards.map(function(card){return card.char_name;});if(this.props.weights.type>-1){cards=cards.filter(function(e){return e.type===_this2.props.weights.type;});}var processedCards=processCards(cards,this.props.weights,this.props.selectedCards);if(processedCards.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"tier-list\"});}var rows=[[]];var current_row=0;var step=(processedCards[0].score-processedCards[processedCards.length-1].score)/7;var boundary=processedCards[0].score-step;var _loop=function _loop(i){while(processedCards[i].score<boundary-1){rows.push([]);current_row++;boundary-=step;}rows[current_row].push(/*#__PURE__*/_jsx(SupportCard,{id:processedCards[i].id,lb:processedCards[i].lb,score:processedCards[i].score,info:processedCards[i].info,charName:processedCards[i].char_name,selected:selectedNames,card:cards.find(function(c){return c.id===processedCards[i].id&&c.limit_break===processedCards[i].lb;}),onClick:function onClick(){return _this2.props.cardSelected(cards.find(function(c){return c.id===processedCards[i].id&&c.limit_break===processedCards[i].lb;}));},stats:_this2.state.dropdownSelections},processedCards[i].id+\"LB\"+processedCards[i].lb));};for(var i=0;i<processedCards.length;i++){_loop(i);}var tiers=[];for(var _i=0;_i<7;_i++){tiers.push(/*#__PURE__*/_jsxs(\"div\",{className:\"tier\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tier-letter\",children:tierNames[_i]}),/*#__PURE__*/_jsx(\"div\",{className:\"tier-images\",children:rows[_i]})]},tierNames[_i]));}var count=this.props.selectedCards.filter(function(c){return c.type==_this2.props.weights.type;}).length;var dropdownOptions=[{value:\"none\",label:\"None\"}];var properties=Object.keys(supportCardProperties).sort();for(var _i2=0;_i2<properties.length;_i2++){dropdownOptions.push({value:properties[_i2],label:supportCardProperties[properties[_i2]].friendly_name});}return/*#__PURE__*/_jsxs(\"div\",{className:\"tier-list\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"selectors\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"selectLabel\",children:\"Show Stats:\"}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown1Changed,defaultValue:{value:\"none\",label:\"None\"}}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown2Changed,defaultValue:{value:\"none\",label:\"None\"}}),/*#__PURE__*/_jsx(Select,{className:\"select\",options:dropdownOptions,onChange:this.onDropdown3Changed,defaultValue:{value:\"none\",label:\"None\"}})]}),/*#__PURE__*/_jsxs(\"span\",{className:\"label\",children:[\"Ranking for the \",ordinal[count],\" \",type_names[this.props.weights.type],\" card in this deck:\"]}),tiers]});}}]);return TierList;}(React.Component);var tierNames=['S','A','B','C','D','E','F'];var raceRewards=[[2,2,2,2,2,35],[1.6,1.6,1.6,1.6,1.6,25],[1,1,1,1,1,20],[13.5,13.5,13.5,13.5,13.5,50]];function processCards(cards,weights,selectedCards){var processedCards=[];selectedCards=selectedCards.slice();// Calculate some stuff here so we don't have to do it a million times later\nvar presentTypes=[false,false,false,false,false,false,false];var cardsPerType=[[],[],[],[],[],[],[]];var baseBondNeeded=0;for(var card=0;card<selectedCards.length;card++){var selectedCard=selectedCards[card];var cardSpecialty=(100+selectedCard.specialty_rate+weights.bonusSpec)*selectedCard.unique_specialty*selectedCard.fs_specialty;var cardSpecialtyPercent=cardSpecialty/(450+cardSpecialty);selectedCard.rainbowSpecialty=cardSpecialtyPercent;selectedCard.offSpecialty=100/(450+cardSpecialty);selectedCard.cardType=selectedCard.type;selectedCard.index=card;presentTypes[selectedCard.cardType]=true;cardsPerType[selectedCard.cardType].push(selectedCard);if(selectedCard.cardType==6){baseBondNeeded+=55-selectedCard.sb;}else{baseBondNeeded+=75-selectedCard.sb;}if(events[selectedCard.id]){baseBondNeeded-=events[selectedCard.id][7];}}var preferredRainbowChances=[0,0,0,0,0];var _loop2=function _loop2(i){if(i!=weights.type){if(cardsPerType[i].length>0){var minimum=1;if(weights.prioritize){minimum=2;}var combos=GetCombinations(cardsPerType[i],minimum);if(combos.length>0){preferredRainbowChances[i]=combos.reduce(function(current,combo){return current+=CalculateCombinationChance(combo,undefined,i);},0);}}}};for(var i=0;i<5;i++){_loop2(i);}var chanceOfPreferredRainbow=1-preferredRainbowChances.reduce(function(current,chance){return current*(1-chance);},1);for(var _i3=0;_i3<cards.length;_i3++){var info={};var _card=JSON.parse(JSON.stringify(cards[_i3]));var cardType=_card.type;_card.index=6;var bondNeeded=baseBondNeeded;if(cardType==6){bondNeeded+=55-_card.sb;}else{bondNeeded+=75-_card.sb;}var presentTypesWithCard=presentTypes.slice();presentTypesWithCard[cardType]=true;var typeCount=presentTypesWithCard.filter(Boolean).length;// Add starting stats and stats from events\nvar score=_card.sb;var energyGain=0;var statGains=_card.starting_stats.slice();statGains.push(0);info.starting_stats=_card.starting_stats.slice();info.event_stats=[0,0,0,0,0,0,0];if(events[_card.id]){info.event_stats=events[_card.id].slice();for(var stat=0;stat<6;stat++){statGains[stat]+=events[_card.id][stat]*_card.effect_size_up;info.event_stats[stat]=events[_card.id][stat]*_card.effect_size_up;}energyGain+=events[_card.id][6]*_card.energy_up;bondNeeded-=events[_card.id][7];score+=events[_card.id][7];}else{// Dummy event values for cards we don't yet know the events for\nif(_card.rarity===2){// 35 total\nfor(var _stat=0;_stat<5;_stat++){statGains[_stat]+=7;}bondNeeded-=5;}else if(_card.rarity===3){// 45 total\nfor(var _stat2=0;_stat2<5;_stat2++){statGains[_stat2]+=9;}bondNeeded-=5;}score+=5;}if(_card.type_stats>0){statGains[_card.type]+=_card.type_stats;for(var sc=0;sc<selectedCards.length;sc++){if(selectedCards[sc].type<6){statGains[selectedCards[sc].type]+=_card.type_stats;}else{statGains[0]+=_card.type_stats/5;statGains[1]+=_card.type_stats/5;statGains[2]+=_card.type_stats/5;statGains[3]+=_card.type_stats/5;statGains[4]+=_card.type_stats/5;}}}var trainingDays=65-weights.races[0]-weights.races[1]-weights.races[2];if(cardType===6)trainingDays-=5;var daysToBond=bondNeeded/weights.bondPerDay;var rainbowDays=trainingDays-daysToBond;var specialty=(100+_card.specialty_rate+weights.bonusSpec)*_card.unique_specialty*_card.fs_specialty;var specialtyPercent=specialty/(450+specialty);var otherPercent=100/(450+specialty);var offstatAppearanceDenominator=_card.offstat_appearance_denominator;var daysPerTraining=[0,0,0,0,0];var bondedDaysPerTraining=[0,0,0,0,0];var rainbowTraining=0;var rainbowOverride=1;if(cardType!=6){var chanceOfSingleRainbow=0;var cardsOfThisType=cardsPerType[cardType].slice();_card.rainbowSpecialty=specialtyPercent;_card.offSpecialty=otherPercent;cardsOfThisType.push(_card);for(var j=0;j<cardsOfThisType.length;j++){console.log(cardsOfThisType);chanceOfSingleRainbow+=CalculateCombinationChance([cardsOfThisType[j]],cardsOfThisType,cardType);}rainbowOverride=1-chanceOfPreferredRainbow*chanceOfSingleRainbow;}// Calculate appearance rates on each training\nfor(var _stat3=0;_stat3<5;_stat3++){if(_stat3==cardType){rainbowTraining=specialtyPercent*rainbowDays*rainbowOverride;daysPerTraining[_stat3]=specialtyPercent*daysToBond;}else{daysPerTraining[_stat3]=otherPercent/offstatAppearanceDenominator*daysToBond;bondedDaysPerTraining[_stat3]=otherPercent/offstatAppearanceDenominator*rainbowDays;}}if(weights.onlySummer){rainbowTraining=8*specialtyPercent*rainbowOverride;}if(_card.fs_ramp[0]>0){var current_bonus=0;var total=0;for(var _j=rainbowTraining*0.66;_j>0;_j--){total+=current_bonus;current_bonus=Math.min(current_bonus+_card.fs_ramp[0],_card.fs_ramp[1]);}_card.unique_fs_bonus=1+total/rainbowTraining/100;}// Stats from cross-training\ninfo.non_rainbow_gains=[0,0,0,0,0,0,0];for(var training=0;training<5;training++){var gains=weights.unbondedTrainingGain[training];var daysOnThisTraining=daysPerTraining[training];energyGain+=daysOnThisTraining*gains[6]*_card.energy_discount;var trainingGains=CalculateCrossTrainingGain(gains,weights,_card,selectedCards,training,daysOnThisTraining,typeCount,false);for(var _stat4=0;_stat4<6;_stat4++){statGains[_stat4]+=trainingGains[_stat4];info.non_rainbow_gains[_stat4]+=trainingGains[_stat4];}info.non_rainbow_gains[6]+=daysOnThisTraining*gains[6]*_card.energy_discount;}// Stats from cross-training while bonded\nfor(var _training=0;_training<5;_training++){var _gains=weights.bondedTrainingGain[_training];var _daysOnThisTraining=bondedDaysPerTraining[_training];energyGain+=_daysOnThisTraining*_gains[6]*_card.energy_discount;energyGain+=_daysOnThisTraining*_gains[6]*_card.fs_energy;var _trainingGains=CalculateCrossTrainingGain(_gains,weights,_card,selectedCards,_training,_daysOnThisTraining,typeCount,true);for(var _stat5=0;_stat5<6;_stat5++){statGains[_stat5]+=_trainingGains[_stat5];info.non_rainbow_gains[_stat5]+=_trainingGains[_stat5];}info.non_rainbow_gains[6]+=_daysOnThisTraining*_gains[6]*_card.energy_discount;info.non_rainbow_gains[6]+=_daysOnThisTraining*_gains[6]*_card.fs_energy;if(_training==4&&_card.group){energyGain+=_daysOnThisTraining*_card.wisdom_recovery/5;}}info.rainbow_gains=[0,0,0,0,0,0,0];// Stats from rainbows\nif(cardType<6){energyGain+=rainbowTraining*_card.wisdom_recovery;var specialtyGains=weights.bondedTrainingGain[cardType];if(weights.onlySummer){specialtyGains=weights.summerTrainingGain[cardType];}var _trainingGains2=CalculateTrainingGain(specialtyGains,weights,_card,selectedCards,cardType,rainbowTraining,true,typeCount);info.rainbow_gains=_trainingGains2.slice();info.rainbow_gains.push(rainbowTraining*_card.wisdom_recovery);for(var _stat6=0;_stat6<6;_stat6++){statGains[_stat6]+=_trainingGains2[_stat6];}}info.race_bonus_gains=0;// Race bonus\nfor(var raceType=0;raceType<4;raceType++){for(var _stat7=0;_stat7<6;_stat7++){statGains[_stat7]+=raceRewards[raceType][_stat7]*(_card.race_bonus/100)*weights.races[raceType];info.race_bonus_gains+=raceRewards[raceType][_stat7]*(_card.race_bonus/100)*weights.races[raceType];}}// Convert stat gains to score\nscore+=GainsToScore(statGains,weights);score+=energyGain*weights.stats[6];if(weights.scenarioLink.indexOf(_card.char_name)>-1){score+=weights.scenarioBonus;}processedCards.push({id:_card.id,lb:_card.limit_break,score:score,info:info,char_name:_card.char_name});}processedCards.sort(function(a,b){return b.score-a.score;});return processedCards;}function CalculateTrainingGain(gains,weights,card,otherCards,trainingType,days,rainbow,typeCount){var trainingGains=[0,0,0,0,0,0,0];var trainingBonus=card.tb+card.fan_bonus*weights.fanBonus;if(typeCount>=card.highlander_threshold)trainingBonus+=card.highlander_training;var fsBonus=1;var motivationBonus=card.mb;if(rainbow){fsBonus=card.fs_bonus*card.unique_fs_bonus;motivationBonus+=card.fs_motivation;trainingBonus+=card.fs_training;}var soloGain=[0,0,0,0,0,0];for(var stat=0;stat<6;stat++){if(gains[stat]===0)continue;var base=gains[stat]+card.stat_bonus[stat];if(rainbow){base+=card.fs_stats[stat];}soloGain[stat]+=base*trainingBonus*(1+weights.motivation*motivationBonus)*fsBonus*1.05*weights.umaBonus[stat]-gains[stat];}if(GainsToScore(soloGain,weights)>weights.minimum){for(var _stat8=0;_stat8<6;_stat8++){trainingGains[_stat8]+=soloGain[_stat8]*days*CalculateCombinationChance([],otherCards,trainingType)*(rainbow?weights.multi:1);}}if(otherCards.length==0)return trainingGains;var combinations=GetCombinations(otherCards);var _loop3=function _loop3(i){var fullCombinationGains=[0,0,0,0,0,0];var fullTotalGains=[0,0,0,0,0,0];trainingBonus+=(combinations[i].length+1)*card.crowd_bonus;var combinationTrainingBonus=combinations[i].reduce(function(current,c){var training=current+(c.tb-1)+combinations[i].length*c.crowd_bonus;if(typeCount>=c.highlander_threshold)training+=c.highlander_training;return training;},1);var combinationFriendshipBonus=combinations[i].reduce(function(current,c){if(c.cardType===trainingType){return current*c.fs_bonus*c.unique_fs_bonus;}else{return current;}},1);var combinationMotivationBonus=combinations[i].reduce(function(current,c){return current+c.mb-1;},1);var _loop4=function _loop4(_stat9){if(gains[_stat9]===0)return\"continue\";var combinationStatBonus=combinations[i].reduce(function(current,c){return current+c.stat_bonus[_stat9];},0);var base=gains[_stat9]+combinationStatBonus;if(rainbow){base+=card.fs_stats[_stat9];}var combinationGains=base*combinationTrainingBonus*(1+weights.motivation*combinationMotivationBonus)*combinationFriendshipBonus*(1.05*combinations[i].length)*weights.umaBonus[_stat9];var totalGains=(base+card.stat_bonus[_stat9])*(combinationTrainingBonus+trainingBonus-1)*(1+weights.motivation*(combinationMotivationBonus+motivationBonus-1))*(combinationFriendshipBonus*fsBonus)*(1.05*(combinations[i].length+1))*weights.umaBonus[_stat9];fullCombinationGains[_stat9]+=combinationGains;fullTotalGains[_stat9]+=totalGains;};for(var _stat9=0;_stat9<6;_stat9++){var _ret=_loop4(_stat9);if(_ret===\"continue\")continue;}trainingBonus-=(combinations[i].length+1)*card.crowd_bonus;if(GainsToScore(fullTotalGains,weights)>weights.minimum){for(var _stat10=0;_stat10<6;_stat10++){trainingGains[_stat10]+=(fullTotalGains[_stat10]-fullCombinationGains[_stat10])*days*CalculateCombinationChance(combinations[i],otherCards,trainingType)*(rainbow?weights.multi:1);}}};for(var i=0;i<combinations.length;i++){_loop3(i);}return trainingGains;}function CalculateCrossTrainingGain(gains,weights,card,otherCards,trainingType,days,typeCount,bonded){var trainingGains=[0,0,0,0,0,0,0];var statCards=otherCards.filter(function(c){return c.cardType===trainingType;});var trainingBonus=card.tb+card.fan_bonus*weights.fanBonus;if(typeCount>=card.highlander_threshold)trainingBonus+=card.highlander_training;var fsBonus=1;if(card.group&&bonded){fsBonus+=(card.fs_bonus+card.unique_fs_bonus-1)/5;}var combinations=GetCombinations(otherCards);var _loop5=function _loop5(i){var combination=combinations[i];var fullCombinationGains=[0,0,0,0,0,0];var fullTotalGains=[0,0,0,0,0,0];trainingBonus+=(combination.length+1)*card.crowd_bonus;var combinationTrainingBonus=combination.reduce(function(current,c){var training=current+(c.tb-1)+combination.length*c.crowd_bonus;if(typeCount>=c.highlander_threshold)training+=c.highlander_training;return training;},1);var combinationFriendshipBonus=combination.reduce(function(current,c){if(c.cardType===trainingType){return current*c.fs_bonus*c.unique_fs_bonus;}else{return current;}},1);var combinationMotivationBonus=combination.reduce(function(current,c){return current+c.mb-1;},1);var _loop6=function _loop6(stat){if(gains[stat]===0)return\"continue\";if(!combination.some(function(r){return statCards.indexOf(r)>-1;}))return\"continue\";var combinationStatBonus=combination.reduce(function(current,c){return current+c.stat_bonus[stat];},0);var base=gains[stat]+combinationStatBonus;var combinationGains=base*combinationTrainingBonus*(1+weights.motivation*combinationMotivationBonus)*combinationFriendshipBonus*(1.05*combination.length)*weights.umaBonus[stat];var totalGains=0;if(bonded){totalGains=(base+card.stat_bonus[stat]+card.fs_stats[stat])*(combinationTrainingBonus+trainingBonus+card.fs_training-1)*(1+weights.motivation*(combinationMotivationBonus+card.mb+card.fs_motivation-1))*(combinationFriendshipBonus*fsBonus)*(1.05*(combination.length+1))*weights.umaBonus[stat];}else{totalGains=(base+card.stat_bonus[stat])*(combinationTrainingBonus+trainingBonus-1)*(1+weights.motivation*(combinationMotivationBonus+card.mb-1))*(1.05*(combination.length+1))*weights.umaBonus[stat];}fullCombinationGains[stat]+=combinationGains;fullTotalGains[stat]+=totalGains;};for(var stat=0;stat<6;stat++){var _ret2=_loop6(stat);if(_ret2===\"continue\")continue;}trainingBonus-=(combination.length+1)*card.crowd_bonus;if(GainsToScore(fullTotalGains,weights)>weights.minimum){for(var _stat11=0;_stat11<6;_stat11++){trainingGains[_stat11]+=(fullTotalGains[_stat11]-fullCombinationGains[_stat11])*days*CalculateCombinationChance(combinations[i],otherCards,trainingType)*weights.multi;}}};for(var i=0;i<combinations.length;i++){_loop5(i);}return trainingGains;}function GainsToScore(gains,weights){var score=0;for(var stat=0;stat<6;stat++){score+=Math.min(gains[stat],weights.cap)*weights.stats[stat];}return score;}function GetCombinations(cards){var minLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var combinations=[];var temp=[];var count=Math.pow(2,cards.length);for(var i=0;i<count;i++){temp=[];for(var j=0;j<cards.length;j++){if(i&Math.pow(2,j)){temp.push(cards[j]);}}if(temp.length>=minLength){combinations.push(temp);}}return combinations;}function CalculateCombinationChance(combination,cards,trainingType){var chance=combination.reduce(function(current,card){if(card.cardType===trainingType){return current*card.rainbowSpecialty;}else{return current*card.offSpecialty;}},1);if(cards){var otherCards=cards.filter(function(c){return combination.findIndex(function(d){return c.index==d.index;})===-1;});chance=otherCards.reduce(function(current,card){if(card.cardType===trainingType){return current*(1-card.rainbowSpecialty);}else{return current*(1-card.offSpecialty);}},chance);}return chance;}export default TierList;","map":{"version":3,"sources":["C:/Users/Chun/ChunAlt.github.io/src/components/TierList.js"],"names":["React","SupportCard","events","supportCardProperties","Select","ordinal","type_names","TierList","props","state","dropdownSelections","onDropdown1Changed","bind","onDropdown2Changed","onDropdown3Changed","newValue","newSelections","slice","value","console","log","setState","cards","selectedNames","selectedCards","map","card","char_name","weights","type","filter","e","processedCards","processCards","length","rows","current_row","step","score","boundary","i","push","id","lb","info","find","c","limit_break","cardSelected","tiers","tierNames","count","dropdownOptions","label","properties","Object","keys","sort","friendly_name","Component","raceRewards","presentTypes","cardsPerType","baseBondNeeded","selectedCard","cardSpecialty","specialty_rate","bonusSpec","unique_specialty","fs_specialty","cardSpecialtyPercent","rainbowSpecialty","offSpecialty","cardType","index","sb","preferredRainbowChances","minimum","prioritize","combos","GetCombinations","reduce","current","combo","CalculateCombinationChance","undefined","chanceOfPreferredRainbow","chance","JSON","parse","stringify","bondNeeded","presentTypesWithCard","typeCount","Boolean","energyGain","statGains","starting_stats","event_stats","stat","effect_size_up","energy_up","rarity","type_stats","sc","trainingDays","races","daysToBond","bondPerDay","rainbowDays","specialty","specialtyPercent","otherPercent","offstatAppearanceDenominator","offstat_appearance_denominator","daysPerTraining","bondedDaysPerTraining","rainbowTraining","rainbowOverride","chanceOfSingleRainbow","cardsOfThisType","j","onlySummer","fs_ramp","current_bonus","total","Math","min","unique_fs_bonus","non_rainbow_gains","training","gains","unbondedTrainingGain","daysOnThisTraining","energy_discount","trainingGains","CalculateCrossTrainingGain","bondedTrainingGain","fs_energy","group","wisdom_recovery","rainbow_gains","specialtyGains","summerTrainingGain","CalculateTrainingGain","race_bonus_gains","raceType","race_bonus","GainsToScore","stats","scenarioLink","indexOf","scenarioBonus","a","b","otherCards","trainingType","days","rainbow","trainingBonus","tb","fan_bonus","fanBonus","highlander_threshold","highlander_training","fsBonus","motivationBonus","mb","fs_bonus","fs_motivation","fs_training","soloGain","base","stat_bonus","fs_stats","motivation","umaBonus","multi","combinations","fullCombinationGains","fullTotalGains","crowd_bonus","combinationTrainingBonus","combinationFriendshipBonus","combinationMotivationBonus","combinationStatBonus","combinationGains","totalGains","bonded","statCards","combination","some","r","cap","minLength","temp","pow","findIndex","d"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport SupportCard from './SupportCard';\r\nimport events from '../card-events';\r\nimport { supportCardProperties } from '../constants';\r\nimport Select from 'react-select';\r\n\r\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\r\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\r\n\r\nclass TierList extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dropdownSelections: [\"none\",\"none\",\"none\"]\r\n        }\r\n\r\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\r\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\r\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\r\n    }\r\n\r\n    //lmao\r\n    onDropdown1Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[0] = newValue.value;\r\n        console.log(newValue);\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown2Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[1] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown3Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[2] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n\r\n    render() {\r\n        let cards = this.props.cards;\r\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\r\n    \r\n        if(this.props.weights.type > -1) {\r\n            cards = cards.filter(e => e.type === this.props.weights.type);\r\n        }\r\n    \r\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\r\n    \r\n        if (processedCards.length === 0) {\r\n            return <div className=\"tier-list\"></div>;\r\n        }\r\n    \r\n        let rows = [[]];\r\n        let current_row = 0;\r\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\r\n        let boundary = processedCards[0].score - step;\r\n    \r\n        for (let i = 0; i < processedCards.length; i++) {\r\n            while (processedCards[i].score < boundary - 1) {\r\n                rows.push([]);\r\n                current_row++;\r\n                boundary -= step;\r\n            }\r\n    \r\n            rows[current_row].push((\r\n                <SupportCard\r\n                    id={processedCards[i].id}\r\n                    lb={processedCards[i].lb}\r\n                    score={processedCards[i].score}\r\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\r\n                    info={processedCards[i].info}\r\n                    charName={processedCards[i].char_name}\r\n                    selected={selectedNames}\r\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\r\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\r\n                    stats={this.state.dropdownSelections}\r\n                />\r\n            ));\r\n        }\r\n    \r\n        let tiers = [];\r\n    \r\n        for (let i = 0; i < 7; i++) {\r\n            tiers.push(\r\n                <div className=\"tier\" key={tierNames[i]}>\r\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\r\n                    <div className=\"tier-images\">{rows[i]}</div>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\r\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\r\n        let properties = Object.keys(supportCardProperties).sort();\r\n        for (let i = 0; i < properties.length; i++) {\r\n            dropdownOptions.push({\r\n                value:properties[i],\r\n                label:supportCardProperties[properties[i]].friendly_name\r\n            });\r\n        }\r\n    \r\n        return (\r\n            <div className=\"tier-list\">\r\n                <div className=\"selectors\">\r\n                    <span className=\"selectLabel\">Show Stats:</span>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                </div>\r\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\r\n                {tiers}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\r\nconst raceRewards = [\r\n    [2, 2, 2, 2, 2, 35],\r\n    [1.6, 1.6, 1.6, 1.6, 1.6, 25],\r\n    [1, 1, 1, 1, 1, 20],\r\n    [13.5,13.5,13.5,13.5,13.5,50]\r\n]\r\n\r\nfunction processCards(cards, weights, selectedCards) {\r\n    let processedCards = [];\r\n    selectedCards = selectedCards.slice();\r\n    \r\n    // Calculate some stuff here so we don't have to do it a million times later\r\n    let presentTypes = [false,false,false,false,false,false,false];\r\n    let cardsPerType = [[],[],[],[],[],[],[]];\r\n    let baseBondNeeded = 0;\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let selectedCard = selectedCards[card];\r\n        let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\r\n        let cardSpecialtyPercent = (cardSpecialty) / (450 + cardSpecialty)\r\n        selectedCard.rainbowSpecialty = cardSpecialtyPercent;\r\n        selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\r\n        selectedCard.cardType = selectedCard.type;\r\n        selectedCard.index = card;\r\n        presentTypes[selectedCard.cardType] = true;\r\n        cardsPerType[selectedCard.cardType].push(selectedCard);\r\n        if (selectedCard.cardType == 6) {\r\n            baseBondNeeded += 55 - selectedCard.sb\r\n        } else {\r\n            baseBondNeeded += 75 - selectedCard.sb\r\n        }\r\n        if (events[selectedCard.id]) {\r\n            baseBondNeeded -= events[selectedCard.id][7];\r\n        }\r\n    }\r\n\r\n    let preferredRainbowChances = [0,0,0,0,0];\r\n    for (let i = 0; i < 5; i++) {\r\n        if (i != weights.type) {\r\n            if(cardsPerType[i].length > 0) {\r\n                let minimum = 1;\r\n                if (weights.prioritize) {\r\n                    minimum = 2;\r\n                }\r\n                let combos = GetCombinations(cardsPerType[i], minimum);\r\n                if (combos.length > 0) {\r\n                    preferredRainbowChances[i] = combos.reduce((current, combo) => {\r\n                        return current += CalculateCombinationChance(combo, undefined, i);\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\r\n        return current * (1 - chance);\r\n    }, 1);\r\n    \r\n    for (let i = 0; i < cards.length; i++) {\r\n        let info = {};\r\n        let card = JSON.parse(JSON.stringify(cards[i]));\r\n        let cardType = card.type;\r\n        card.index = 6;\r\n        let bondNeeded = baseBondNeeded;\r\n        if (cardType == 6) {\r\n            bondNeeded += 55 - card.sb\r\n        } else {\r\n            bondNeeded += 75 - card.sb\r\n        }\r\n        let presentTypesWithCard = presentTypes.slice();\r\n        presentTypesWithCard[cardType] = true;\r\n\r\n        let typeCount = presentTypesWithCard.filter(Boolean).length;\r\n\r\n        // Add starting stats and stats from events\r\n        let score = card.sb;\r\n        let energyGain = 0;\r\n        let statGains = card.starting_stats.slice();\r\n        statGains.push(0);\r\n        \r\n        info.starting_stats = card.starting_stats.slice();\r\n        info.event_stats = [0,0,0,0,0,0,0];\r\n        \r\n        if (events[card.id]) {\r\n            info.event_stats = events[card.id].slice();\r\n            for (let stat = 0; stat < 6; stat++) {\r\n                statGains[stat] += events[card.id][stat] * card.effect_size_up;\r\n                info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\r\n            }\r\n            energyGain += events[card.id][6] * card.energy_up;\r\n            bondNeeded -= events[card.id][7];\r\n            score += events[card.id][7];\r\n        } else {\r\n            // Dummy event values for cards we don't yet know the events for\r\n            if (card.rarity === 2) {\r\n                // 35 total\r\n                for (let stat = 0; stat < 5; stat++) {\r\n                    statGains[stat] += 7;\r\n                }\r\n                bondNeeded -= 5;\r\n            } else if (card.rarity === 3) {\r\n                // 45 total\r\n                for (let stat = 0; stat < 5; stat++) {\r\n                    statGains[stat] += 9;\r\n                }\r\n                bondNeeded -= 5;\r\n            }\r\n            score += 5;\r\n        }\r\n\r\n        if (card.type_stats > 0) {\r\n            statGains[card.type] += card.type_stats;\r\n            for (let sc = 0; sc < selectedCards.length; sc++) {\r\n                if(selectedCards[sc].type < 6) {\r\n                    statGains[selectedCards[sc].type] += card.type_stats;\r\n                } else {\r\n                    statGains[0] += card.type_stats / 5;\r\n                    statGains[1] += card.type_stats / 5;\r\n                    statGains[2] += card.type_stats / 5;\r\n                    statGains[3] += card.type_stats / 5;\r\n                    statGains[4] += card.type_stats / 5;\r\n                }\r\n            }\r\n        }\r\n        \r\n        let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\r\n        if(cardType === 6) trainingDays -= 5;\r\n        let daysToBond = bondNeeded / weights.bondPerDay;\r\n        let rainbowDays = trainingDays - daysToBond;\r\n        let specialty = (100 + card.specialty_rate + weights.bonusSpec) * card.unique_specialty * card.fs_specialty;\r\n        let specialtyPercent = specialty / (450 + specialty);\r\n        let otherPercent = 100 / (450 + specialty);\r\n        let offstatAppearanceDenominator = card.offstat_appearance_denominator;\r\n        let daysPerTraining = [0,0,0,0,0];\r\n        let bondedDaysPerTraining = [0,0,0,0,0];\r\n        let rainbowTraining = 0;\r\n        \r\n        let rainbowOverride = 1;\r\n        if (cardType != 6) {\r\n            let chanceOfSingleRainbow = 0;\r\n            let cardsOfThisType = cardsPerType[cardType].slice();\r\n            card.rainbowSpecialty = specialtyPercent;\r\n            card.offSpecialty = otherPercent;\r\n            cardsOfThisType.push(card);\r\n            for (let j = 0; j < cardsOfThisType.length; j++) {\r\n                console.log(cardsOfThisType);\r\n                chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\r\n            }\r\n            rainbowOverride = 1 - (chanceOfPreferredRainbow * chanceOfSingleRainbow);\r\n        }\r\n        \r\n        // Calculate appearance rates on each training\r\n        for (let stat = 0; stat < 5; stat++) {\r\n            if (stat == cardType) {\r\n                rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\r\n                daysPerTraining[stat] = specialtyPercent * daysToBond;\r\n            } else {\r\n                daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\r\n                bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\r\n            }\r\n        }\r\n\r\n        if (weights.onlySummer) {\r\n            rainbowTraining = 8 * specialtyPercent * rainbowOverride;\r\n        }\r\n\r\n        if (card.fs_ramp[0] > 0) {\r\n            let current_bonus = 0;\r\n            let total = 0;\r\n            for (let j = rainbowTraining * 0.66; j > 0; j--) {\r\n                total += current_bonus;\r\n                current_bonus = Math.min(current_bonus + card.fs_ramp[0], card.fs_ramp[1]);\r\n            }\r\n            card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\r\n        }\r\n\r\n        // Stats from cross-training\r\n        info.non_rainbow_gains = [0,0,0,0,0,0,0];\r\n        for (let training = 0; training < 5; training ++) {\r\n            let gains = weights.unbondedTrainingGain[training];\r\n            let daysOnThisTraining = daysPerTraining[training];\r\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\r\n\r\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\r\n            \r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n                info.non_rainbow_gains[stat] += trainingGains[stat];\r\n            }\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\r\n        }\r\n\r\n        // Stats from cross-training while bonded\r\n        for (let training = 0; training < 5; training ++) {\r\n            let gains = weights.bondedTrainingGain[training];\r\n            let daysOnThisTraining = bondedDaysPerTraining[training];\r\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\r\n            energyGain += daysOnThisTraining * gains[6] * card.fs_energy;\r\n\r\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\r\n            \r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n                info.non_rainbow_gains[stat] += trainingGains[stat];\r\n            }\r\n\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.fs_energy);\r\n\r\n            if (training == 4 && card.group) {\r\n                energyGain += daysOnThisTraining * card.wisdom_recovery / 5;\r\n            }\r\n        }\r\n\r\n        info.rainbow_gains = [0,0,0,0,0,0,0];\r\n\r\n        // Stats from rainbows\r\n        if (cardType < 6) {\r\n            energyGain += rainbowTraining * card.wisdom_recovery;\r\n            let specialtyGains = weights.bondedTrainingGain[cardType];\r\n            if (weights.onlySummer) {\r\n                specialtyGains = weights.summerTrainingGain[cardType];\r\n            }\r\n            let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\r\n\r\n            info.rainbow_gains = trainingGains.slice();\r\n            info.rainbow_gains.push(rainbowTraining * card.wisdom_recovery);\r\n\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n            }\r\n        }\r\n\r\n        info.race_bonus_gains = 0;\r\n\r\n        // Race bonus\r\n        for (let raceType = 0; raceType < 4; raceType++) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\r\n                info.race_bonus_gains += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\r\n            }\r\n        }\r\n\r\n        // Convert stat gains to score\r\n        score += GainsToScore(statGains, weights);\r\n        score += energyGain * weights.stats[6];\r\n\r\n        if(weights.scenarioLink.indexOf(card.char_name) > -1) {\r\n            score += weights.scenarioBonus;\r\n        }\r\n\r\n        processedCards.push({\r\n            id: card.id,\r\n            lb: card.limit_break,\r\n            score: score,\r\n            info: info,\r\n            char_name: card.char_name\r\n        })\r\n    }\r\n\r\n    processedCards.sort((a, b) => b.score - a.score);\r\n    return processedCards;\r\n}\r\n\r\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\r\n    let trainingGains = [0,0,0,0,0,0,0];\r\n\r\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\r\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\r\n    let fsBonus = 1;\r\n    let motivationBonus = card.mb;\r\n    if (rainbow) {\r\n        fsBonus = card.fs_bonus * card.unique_fs_bonus;\r\n        motivationBonus += card.fs_motivation;\r\n        trainingBonus += card.fs_training;\r\n    }\r\n\r\n    let soloGain = [0,0,0,0,0,0];\r\n    for (let stat = 0; stat < 6; stat ++) {\r\n        if (gains[stat] === 0) continue;\r\n\r\n        let base = gains[stat] + card.stat_bonus[stat];\r\n        if (rainbow) {\r\n            base += card.fs_stats[stat];\r\n        }\r\n        soloGain[stat] += (base \r\n            * trainingBonus\r\n            * (1 + weights.motivation * motivationBonus)\r\n            * fsBonus\r\n            * 1.05\r\n            * weights.umaBonus[stat]\r\n            - gains[stat]);\r\n    }\r\n    if (GainsToScore(soloGain, weights) > weights.minimum) {\r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            trainingGains[stat] += soloGain[stat]\r\n                * days\r\n                * CalculateCombinationChance([], otherCards, trainingType)\r\n                * (rainbow ? weights.multi : 1);\r\n        }\r\n    }\r\n    \r\n    if (otherCards.length == 0) return trainingGains;\r\n\r\n    const combinations = GetCombinations(otherCards);\r\n\r\n    for (let i = 0; i < combinations.length; i++) {\r\n        let fullCombinationGains = [0,0,0,0,0,0];\r\n        let fullTotalGains = [0,0,0,0,0,0];\r\n        trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\r\n\r\n        const combinationTrainingBonus = combinations[i].reduce((current, c) => {\r\n            let training = current + (c.tb - 1) + (combinations[i].length * c.crowd_bonus);\r\n            if (typeCount >= c.highlander_threshold)\r\n                training += c.highlander_training;\r\n            return training;\r\n        }, 1);\r\n        const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\r\n            if (c.cardType === trainingType) {\r\n                return current * c.fs_bonus * c.unique_fs_bonus;\r\n            } else {\r\n                return current;\r\n            }\r\n        }, 1);\r\n        const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\r\n        \r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            if (gains[stat] === 0) continue;\r\n            \r\n            const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\r\n            let base = gains[stat] + combinationStatBonus;\r\n            if (rainbow) {\r\n                base += card.fs_stats[stat];\r\n            }\r\n\r\n            let combinationGains = (base \r\n                * combinationTrainingBonus\r\n                * (1 + weights.motivation * combinationMotivationBonus)\r\n                * combinationFriendshipBonus\r\n                * (1.05 * combinations[i].length)\r\n                * weights.umaBonus[stat]);\r\n                \r\n            let totalGains = ((base + card.stat_bonus[stat])\r\n                * (combinationTrainingBonus + trainingBonus - 1)\r\n                * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1))\r\n                * (combinationFriendshipBonus * fsBonus)\r\n                * (1.05 * (combinations[i].length + 1))\r\n                * weights.umaBonus[stat]);\r\n            \r\n            fullCombinationGains[stat] += combinationGains;\r\n            fullTotalGains[stat] += totalGains;\r\n        }\r\n        trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\r\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \r\n                    * days\r\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\r\n                    * (rainbow ? weights.multi : 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    return trainingGains;\r\n}\r\n\r\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\r\n    let trainingGains = [0,0,0,0,0,0,0];\r\n    let statCards = otherCards.filter((c) => c.cardType === trainingType);\r\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\r\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\r\n    let fsBonus = 1;\r\n    if (card.group && bonded) {\r\n        fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\r\n    }\r\n    const combinations = GetCombinations(otherCards);\r\n\r\n    for (let i = 0; i < combinations.length; i++) {\r\n        const combination = combinations[i];\r\n        let fullCombinationGains = [0,0,0,0,0,0];\r\n        let fullTotalGains = [0,0,0,0,0,0];\r\n        trainingBonus += (combination.length + 1) * card.crowd_bonus;\r\n\r\n        const combinationTrainingBonus = combination.reduce((current, c) => {\r\n            let training = current + (c.tb - 1) + (combination.length * c.crowd_bonus);\r\n            if (typeCount >= c.highlander_threshold)\r\n                training += c.highlander_training;\r\n            return training;\r\n        }, 1);\r\n        const combinationFriendshipBonus = combination.reduce((current, c) => {\r\n            if (c.cardType === trainingType) {\r\n                return current * c.fs_bonus * c.unique_fs_bonus;\r\n            } else {\r\n                return current;\r\n            }\r\n        }, 1);\r\n        const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\r\n        \r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            if (gains[stat] === 0) continue;\r\n            if(!combination.some((r) => statCards.indexOf(r) > -1)) continue;\r\n            \r\n            const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\r\n            const base = gains[stat] + combinationStatBonus;\r\n\r\n            let combinationGains = (base \r\n                * combinationTrainingBonus\r\n                * (1 + weights.motivation * combinationMotivationBonus)\r\n                * combinationFriendshipBonus\r\n                * (1.05 * combination.length)\r\n                * weights.umaBonus[stat]);\r\n            \r\n            let totalGains = 0;\r\n            if (bonded) {\r\n                totalGains = ((base + card.stat_bonus[stat] + card.fs_stats[stat])\r\n                    * (combinationTrainingBonus + trainingBonus + card.fs_training - 1)\r\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1))\r\n                    * (combinationFriendshipBonus * fsBonus)\r\n                    * (1.05 * (combination.length + 1))\r\n                    * weights.umaBonus[stat]);\r\n            } else {\r\n                totalGains = ((base + card.stat_bonus[stat])\r\n                    * (combinationTrainingBonus + trainingBonus - 1)\r\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1))\r\n                    * (1.05 * (combination.length + 1))\r\n                    * weights.umaBonus[stat]);\r\n            }\r\n            \r\n            fullCombinationGains[stat] += combinationGains;\r\n            fullTotalGains[stat] += totalGains;\r\n        }\r\n        trainingBonus -= (combination.length + 1) * card.crowd_bonus;\r\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \r\n                    * days\r\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\r\n                    * weights.multi;\r\n            }\r\n        }\r\n    }\r\n\r\n    return trainingGains;\r\n}\r\n\r\nfunction GainsToScore(gains, weights) {\r\n    let score = 0;\r\n    for (let stat = 0; stat < 6; stat ++) {\r\n        score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\r\n    }\r\n    return score;\r\n}\r\n\r\nfunction GetCombinations(cards, minLength = 1) {\r\n    let combinations = [];\r\n    let temp = [];\r\n    const count = Math.pow(2, cards.length);\r\n\r\n    for (let i = 0; i < count; i++){\r\n        temp = [];\r\n        for (let j = 0; j<cards.length; j++) {\r\n            if (i & Math.pow(2,j)) { \r\n                temp.push(cards[j]);\r\n            }\r\n        }\r\n        if (temp.length >= minLength) {\r\n            combinations.push(temp);\r\n        }\r\n    }\r\n\r\n    return combinations;\r\n}\r\n\r\nfunction CalculateCombinationChance(combination, cards, trainingType) {\r\n    let chance = combination.reduce((current, card) => {\r\n        if (card.cardType === trainingType) {\r\n            return current * card.rainbowSpecialty;\r\n        } else {\r\n            return current * card.offSpecialty;\r\n        }\r\n    }, 1);\r\n    \r\n    if (cards) {\r\n        const otherCards = cards.filter((c) => combination.findIndex((d) => c.index == d.index) === -1);\r\n        chance = otherCards.reduce((current, card) => {\r\n            if (card.cardType === trainingType) {\r\n                return current * (1 - card.rainbowSpecialty);\r\n            } else {\r\n                return current * (1 - card.offSpecialty);\r\n            }\r\n        }, chance);\r\n    }\r\n\r\n    return chance;\r\n}\r\n\r\nexport default TierList;\r\n"]},"metadata":{},"sourceType":"module"}