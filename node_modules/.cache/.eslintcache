[{"C:\\Users\\Chun\\ChunAlt.github.io\\src\\index.js":"1","C:\\Users\\Chun\\ChunAlt.github.io\\src\\App.js":"2","C:\\Users\\Chun\\ChunAlt.github.io\\src\\reportWebVitals.js":"3","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\TierList.js":"4","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\Filters.js":"5","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\Weights.js":"6","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\SelectedCards.js":"7","C:\\Users\\Chun\\ChunAlt.github.io\\src\\cards.js":"8","C:\\Users\\Chun\\ChunAlt.github.io\\src\\constants.js":"9","C:\\Users\\Chun\\ChunAlt.github.io\\src\\card-events.js":"10","C:\\Users\\Chun\\ChunAlt.github.io\\src\\utils.js":"11","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\SupportCard.js":"12"},{"size":517,"mtime":1734404924275,"results":"13","hashOfConfig":"14"},{"size":5327,"mtime":1734404924269,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1734404924275,"results":"16","hashOfConfig":"14"},{"size":25524,"mtime":1734404924272,"results":"17","hashOfConfig":"14"},{"size":3536,"mtime":1734404924272,"results":"18","hashOfConfig":"14"},{"size":30425,"mtime":1734404924273,"results":"19","hashOfConfig":"14"},{"size":5189,"mtime":1734404924272,"results":"20","hashOfConfig":"14"},{"size":1113832,"mtime":1734404924271,"results":"21","hashOfConfig":"14"},{"size":670,"mtime":1734404924273,"results":"22","hashOfConfig":"14"},{"size":7960,"mtime":1734404924269,"results":"23","hashOfConfig":"14"},{"size":216,"mtime":1734404924275,"results":"24","hashOfConfig":"14"},{"size":2332,"mtime":1734404924272,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1by639j",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"C:\\Users\\Chun\\ChunAlt.github.io\\src\\index.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\App.js",["67","68"],[],"import './App.css';\r\nimport cards from './cards';\r\nimport TierList from './components/TierList';\r\nimport Weights from './components/Weights';\r\nimport SelectedCards from './components/SelectedCards';\r\nimport Filters from './components/Filters';\r\nimport React from 'react';\r\n\r\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\r\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            weights: {\r\n                type: 0,\r\n                bondPerDay: 3.5,\r\n                trainingDays: 50,\r\n                races: [10,10,5,3],\r\n                unbondedTrainingGain: [\r\n                    [8,0,4,0,0,2,19],\r\n                    [0,7,0,3,0,2,17],\r\n                    [0,4,6,0,0,2,18],\r\n                    [3,0,3,6,0,2,20],\r\n                    [2,0,0,0,6,3,0]\r\n                ],\r\n                bondedTrainingGain: [\r\n                    [10,0,4,0,0,2,21],\r\n                    [0,8,0,3,0,2,18],\r\n                    [0,4,7,0,0,2,19],\r\n                    [4,0,3,9,0,2,24],\r\n                    [3,0,0,0,9,3,0]\r\n                ],\r\n                summerTrainingGain: [\r\n                    [11,0,5,0,0,2,22],\r\n                    [0,9,0,6,0,2,21],\r\n                    [0,4,10,0,0,2,21],\r\n                    [3,0,2,10,0,2,24],\r\n                    [3,0,0,0,9,3,0]\r\n                ],\r\n                umaBonus: [1,1,1,1,1,1],\r\n                stats: [1,1,1.1,1,1,0.5,1.5],\r\n                multi: 1,\r\n                bonusFS: 0,\r\n                bonusSpec: 0,\r\n                motivation: 0.2,\r\n                scenarioLink: [],\r\n                scenarioBonus: 0,\r\n                fanBonus: 0.05,\r\n                prioritize: true,\r\n                onlySummer: false,\r\n            },\r\n            selectedCards: [\r\n                cards.find((c) => c.id === 20023 && c.limit_break === 4),\r\n                cards.find((c) => c.id === 20033 && c.limit_break === 4),\r\n                cards.find((c) => c.id === 20009 && c.limit_break === 4),\r\n                cards.find((c) => c.id === 30134 && c.limit_break === 4),\r\n                cards.find((c) => c.id === 30137 && c.limit_break === 0),\r\n            ],\r\n            availableCards: cards,\r\n            label: \"Ranking for the 4th Speed card in this deck:\"\r\n        }\r\n\r\n        this.onWeightsChanged = this.onWeightsChanged.bind(this);\r\n        this.onCardSelected = this.onCardSelected.bind(this);\r\n        this.onCardRemoved = this.onCardRemoved.bind(this);\r\n        this.onCardsChanged = this.onCardsChanged.bind(this);\r\n        this.onLoadPreset = this.onLoadPreset.bind(this);\r\n    }\r\n\r\n    onWeightsChanged(statWeights, generalWeights) {\r\n        let combinedWeights = {...statWeights, ...generalWeights};\r\n        this.setState({weights: combinedWeights});\r\n    }\r\n\r\n    onCardSelected(card) {\r\n        if (this.state.selectedCards.length > 5) return;\r\n        let cards = this.state.selectedCards.slice();\r\n        let index = this.state.selectedCards.findIndex((c) => c.id === card.id);\r\n\r\n        if (index > -1) {\r\n            cards[index] = card;\r\n        } else {\r\n            cards.push(card);\r\n        }\r\n\r\n        this.setState({selectedCards:cards});\r\n    }\r\n\r\n    onCardRemoved(card) {\r\n        if (this.state.selectedCards.length === 1) return;\r\n        let cards = this.state.selectedCards.slice();\r\n        let cardIndex = cards.findIndex((c) => c.id === card.id);\r\n        cards.splice(cardIndex, 1);\r\n        this.setState({selectedCards:cards});\r\n    }\r\n\r\n    onCardsChanged(cards) {\r\n        this.setState({availableCards: cards});\r\n    }\r\n\r\n    onLoadPreset(presetCards) {\r\n        let selectedCards = [];\r\n        for(let i = 0; i < presetCards.length; i++) {\r\n            selectedCards.push(cards.find((c) => c.id === presetCards[i] && c.limit_break === 4));\r\n        }\r\n        this.setState({selectedCards:selectedCards});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Uma Musume Support Card Tier List</h1>\r\n                <span class=\"section-explanation\">\r\n                    For more game information, check the <a href=\"https://docs.google.com/document/d/1gNcV7XLmxx0OI2DEAR8gmKb8P9BBhcwGhlJOVbYaXeo/edit?usp=sharing\">Uma Musume Reference</a><br/>\r\n                    This tier list defaults to the Grandmasters Scenario and doesn't consider skills, only stats.<br/>\r\n                </span>\r\n                <Weights\r\n                    onChange={this.onWeightsChanged}\r\n                    />\r\n                <SelectedCards\r\n                    selectedCards={this.state.selectedCards}\r\n                    onClick={this.onCardRemoved}\r\n                    onLoadPreset={this.onLoadPreset}\r\n                    weights={this.state.weights}\r\n                    />\r\n                <Filters\r\n                    onCardsChanged={this.onCardsChanged}\r\n                    />\r\n                <TierList \r\n                    cards={this.state.availableCards}\r\n                    weights={this.state.weights}\r\n                    selectedCards={this.state.selectedCards}\r\n                    cardSelected={this.onCardSelected}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Chun\\ChunAlt.github.io\\src\\reportWebVitals.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\TierList.js",["69","70","71","72","73","74","75","76","77"],[],"import React from 'react';\r\nimport SupportCard from './SupportCard';\r\nimport events from '../card-events';\r\nimport { supportCardProperties } from '../constants';\r\nimport Select from 'react-select';\r\n\r\nconst ordinal = [\"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\"];\r\nconst type_names = [\"Speed\", \"Stamina\", \"Power\", \"Guts\", \"Wisdom\", \"\", \"Friend\"];\r\n\r\nclass TierList extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dropdownSelections: [\"none\",\"none\",\"none\"]\r\n        }\r\n\r\n        this.onDropdown1Changed = this.onDropdown1Changed.bind(this);\r\n        this.onDropdown2Changed = this.onDropdown2Changed.bind(this);\r\n        this.onDropdown3Changed = this.onDropdown3Changed.bind(this);\r\n    }\r\n\r\n    //lmao\r\n    onDropdown1Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[0] = newValue.value;\r\n        console.log(newValue);\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown2Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[1] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n    onDropdown3Changed(newValue) {\r\n        let newSelections = this.state.dropdownSelections.slice();\r\n        newSelections[2] = newValue.value;\r\n        this.setState({dropdownSelections:newSelections});\r\n    }\r\n\r\n    render() {\r\n        let cards = this.props.cards;\r\n        let selectedNames = this.props.selectedCards.map(card => card.char_name);\r\n    \r\n        if(this.props.weights.type > -1) {\r\n            cards = cards.filter(e => e.type === this.props.weights.type);\r\n        }\r\n    \r\n        let processedCards = processCards(cards, this.props.weights, this.props.selectedCards);\r\n    \r\n        if (processedCards.length === 0) {\r\n            return <div className=\"tier-list\"></div>;\r\n        }\r\n    \r\n        let rows = [[]];\r\n        let current_row = 0;\r\n        let step = (processedCards[0].score - processedCards[processedCards.length - 1].score) / 7;\r\n        let boundary = processedCards[0].score - step;\r\n    \r\n        for (let i = 0; i < processedCards.length; i++) {\r\n            while (processedCards[i].score < boundary - 1) {\r\n                rows.push([]);\r\n                current_row++;\r\n                boundary -= step;\r\n            }\r\n    \r\n            rows[current_row].push((\r\n                <SupportCard\r\n                    id={processedCards[i].id}\r\n                    lb={processedCards[i].lb}\r\n                    score={processedCards[i].score}\r\n                    key={processedCards[i].id + \"LB\" + processedCards[i].lb}\r\n                    info={processedCards[i].info}\r\n                    charName={processedCards[i].char_name}\r\n                    selected={selectedNames}\r\n                    card={cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb)}\r\n                    onClick={() => this.props.cardSelected(cards.find((c) => c.id === processedCards[i].id && c.limit_break === processedCards[i].lb))}\r\n                    stats={this.state.dropdownSelections}\r\n                />\r\n            ));\r\n        }\r\n    \r\n        let tiers = [];\r\n    \r\n        for (let i = 0; i < 7; i++) {\r\n            tiers.push(\r\n                <div className=\"tier\" key={tierNames[i]}>\r\n                    <div className=\"tier-letter\">{tierNames[i]}</div>\r\n                    <div className=\"tier-images\">{rows[i]}</div>\r\n                </div>\r\n            )\r\n        }\r\n    \r\n        let count = this.props.selectedCards.filter((c) => c.type == this.props.weights.type).length;\r\n        let dropdownOptions = [{value:\"none\", label:\"None\"}];\r\n        let properties = Object.keys(supportCardProperties).sort();\r\n        for (let i = 0; i < properties.length; i++) {\r\n            dropdownOptions.push({\r\n                value:properties[i],\r\n                label:supportCardProperties[properties[i]].friendly_name\r\n            });\r\n        }\r\n    \r\n        return (\r\n            <div className=\"tier-list\">\r\n                <div className=\"selectors\">\r\n                    <span className=\"selectLabel\">Show Stats:</span>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown1Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown2Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                    <Select className=\"select\" options={dropdownOptions} onChange={this.onDropdown3Changed} defaultValue={{value:\"none\", label:\"None\"}}/>\r\n                </div>\r\n                <span className=\"label\">Ranking for the {ordinal[count]} {type_names[this.props.weights.type]} card in this deck:</span>\r\n                {tiers}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst tierNames = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\r\nconst raceRewards = [\r\n    [2, 2, 2, 2, 2, 35],\r\n    [1.6, 1.6, 1.6, 1.6, 1.6, 25],\r\n    [1, 1, 1, 1, 1, 20],\r\n    [13.5,13.5,13.5,13.5,13.5,50]\r\n]\r\n\r\nfunction processCards(cards, weights, selectedCards) {\r\n    let processedCards = [];\r\n    selectedCards = selectedCards.slice();\r\n    \r\n    // Calculate some stuff here so we don't have to do it a million times later\r\n    let presentTypes = [false,false,false,false,false,false,false];\r\n    let cardsPerType = [[],[],[],[],[],[],[]];\r\n    let baseBondNeeded = 0;\r\n    for (let card = 0; card < selectedCards.length; card++) {\r\n        let selectedCard = selectedCards[card];\r\n        let cardSpecialty = (100 + selectedCard.specialty_rate + weights.bonusSpec) * selectedCard.unique_specialty * selectedCard.fs_specialty;\r\n        let cardSpecialtyPercent = (cardSpecialty) / (450 + cardSpecialty)\r\n        selectedCard.rainbowSpecialty = cardSpecialtyPercent;\r\n        selectedCard.offSpecialty = 100 / (450 + cardSpecialty);\r\n        selectedCard.cardType = selectedCard.type;\r\n        selectedCard.index = card;\r\n        presentTypes[selectedCard.cardType] = true;\r\n        cardsPerType[selectedCard.cardType].push(selectedCard);\r\n        if (selectedCard.cardType == 6) {\r\n            baseBondNeeded += 55 - selectedCard.sb\r\n        } else {\r\n            baseBondNeeded += 75 - selectedCard.sb\r\n        }\r\n        if (events[selectedCard.id]) {\r\n            baseBondNeeded -= events[selectedCard.id][7];\r\n        }\r\n    }\r\n\r\n    let preferredRainbowChances = [0,0,0,0,0];\r\n    for (let i = 0; i < 5; i++) {\r\n        if (i != weights.type) {\r\n            if(cardsPerType[i].length > 0) {\r\n                let minimum = 1;\r\n                if (weights.prioritize) {\r\n                    minimum = 2;\r\n                }\r\n                let combos = GetCombinations(cardsPerType[i], minimum);\r\n                if (combos.length > 0) {\r\n                    preferredRainbowChances[i] = combos.reduce((current, combo) => {\r\n                        return current += CalculateCombinationChance(combo, undefined, i);\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let chanceOfPreferredRainbow = 1 - preferredRainbowChances.reduce((current, chance) => {\r\n        return current * (1 - chance);\r\n    }, 1);\r\n    \r\n    for (let i = 0; i < cards.length; i++) {\r\n        let info = {};\r\n        let card = JSON.parse(JSON.stringify(cards[i]));\r\n        let cardType = card.type;\r\n        card.index = 6;\r\n        let bondNeeded = baseBondNeeded;\r\n        if (cardType == 6) {\r\n            bondNeeded += 55 - card.sb\r\n        } else {\r\n            bondNeeded += 75 - card.sb\r\n        }\r\n        let presentTypesWithCard = presentTypes.slice();\r\n        presentTypesWithCard[cardType] = true;\r\n\r\n        let typeCount = presentTypesWithCard.filter(Boolean).length;\r\n\r\n        // Add starting stats and stats from events\r\n        let score = card.sb;\r\n        let energyGain = 0;\r\n        let statGains = card.starting_stats.slice();\r\n        statGains.push(0);\r\n        \r\n        info.starting_stats = card.starting_stats.slice();\r\n        info.event_stats = [0,0,0,0,0,0,0];\r\n        \r\n        if (events[card.id]) {\r\n            info.event_stats = events[card.id].slice();\r\n            for (let stat = 0; stat < 6; stat++) {\r\n                statGains[stat] += events[card.id][stat] * card.effect_size_up;\r\n                info.event_stats[stat] = events[card.id][stat] * card.effect_size_up;\r\n            }\r\n            energyGain += events[card.id][6] * card.energy_up;\r\n            bondNeeded -= events[card.id][7];\r\n            score += events[card.id][7];\r\n        } else {\r\n            // Dummy event values for cards we don't yet know the events for\r\n            if (card.rarity === 2) {\r\n                // 35 total\r\n                for (let stat = 0; stat < 5; stat++) {\r\n                    statGains[stat] += 7;\r\n                }\r\n                bondNeeded -= 5;\r\n            } else if (card.rarity === 3) {\r\n                // 45 total\r\n                for (let stat = 0; stat < 5; stat++) {\r\n                    statGains[stat] += 9;\r\n                }\r\n                bondNeeded -= 5;\r\n            }\r\n            score += 5;\r\n        }\r\n\r\n        if (card.type_stats > 0) {\r\n            statGains[card.type] += card.type_stats;\r\n            for (let sc = 0; sc < selectedCards.length; sc++) {\r\n                if(selectedCards[sc].type < 6) {\r\n                    statGains[selectedCards[sc].type] += card.type_stats;\r\n                } else {\r\n                    statGains[0] += card.type_stats / 5;\r\n                    statGains[1] += card.type_stats / 5;\r\n                    statGains[2] += card.type_stats / 5;\r\n                    statGains[3] += card.type_stats / 5;\r\n                    statGains[4] += card.type_stats / 5;\r\n                }\r\n            }\r\n        }\r\n        \r\n        let trainingDays = 65 - weights.races[0] - weights.races[1] - weights.races[2];\r\n        if(cardType === 6) trainingDays -= 5;\r\n        let daysToBond = bondNeeded / weights.bondPerDay;\r\n        let rainbowDays = trainingDays - daysToBond;\r\n        let specialty = (100 + card.specialty_rate + weights.bonusSpec) * card.unique_specialty * card.fs_specialty;\r\n        let specialtyPercent = specialty / (450 + specialty);\r\n        let otherPercent = 100 / (450 + specialty);\r\n        let offstatAppearanceDenominator = card.offstat_appearance_denominator;\r\n        let daysPerTraining = [0,0,0,0,0];\r\n        let bondedDaysPerTraining = [0,0,0,0,0];\r\n        let rainbowTraining = 0;\r\n        \r\n        let rainbowOverride = 1;\r\n        if (cardType != 6) {\r\n            let chanceOfSingleRainbow = 0;\r\n            let cardsOfThisType = cardsPerType[cardType].slice();\r\n            card.rainbowSpecialty = specialtyPercent;\r\n            card.offSpecialty = otherPercent;\r\n            cardsOfThisType.push(card);\r\n            for (let j = 0; j < cardsOfThisType.length; j++) {\r\n                console.log(cardsOfThisType);\r\n                chanceOfSingleRainbow += CalculateCombinationChance([cardsOfThisType[j]], cardsOfThisType, cardType);\r\n            }\r\n            rainbowOverride = 1 - (chanceOfPreferredRainbow * chanceOfSingleRainbow);\r\n        }\r\n        \r\n        // Calculate appearance rates on each training\r\n        for (let stat = 0; stat < 5; stat++) {\r\n            if (stat == cardType) {\r\n                rainbowTraining = specialtyPercent * rainbowDays * rainbowOverride;\r\n                daysPerTraining[stat] = specialtyPercent * daysToBond;\r\n            } else {\r\n                daysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * daysToBond;\r\n                bondedDaysPerTraining[stat] = otherPercent / offstatAppearanceDenominator * rainbowDays;\r\n            }\r\n        }\r\n\r\n        if (weights.onlySummer) {\r\n            rainbowTraining = 8 * specialtyPercent * rainbowOverride;\r\n        }\r\n\r\n        if (card.fs_ramp[0] > 0) {\r\n            let current_bonus = 0;\r\n            let total = 0;\r\n            for (let j = rainbowTraining * 0.66; j > 0; j--) {\r\n                total += current_bonus;\r\n                current_bonus = Math.min(current_bonus + card.fs_ramp[0], card.fs_ramp[1]);\r\n            }\r\n            card.unique_fs_bonus = 1 + total / rainbowTraining / 100;\r\n        }\r\n\r\n        // Stats from cross-training\r\n        info.non_rainbow_gains = [0,0,0,0,0,0,0];\r\n        for (let training = 0; training < 5; training ++) {\r\n            let gains = weights.unbondedTrainingGain[training];\r\n            let daysOnThisTraining = daysPerTraining[training];\r\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\r\n\r\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, false);\r\n            \r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n                info.non_rainbow_gains[stat] += trainingGains[stat];\r\n            }\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\r\n        }\r\n\r\n        // Stats from cross-training while bonded\r\n        for (let training = 0; training < 5; training ++) {\r\n            let gains = weights.bondedTrainingGain[training];\r\n            let daysOnThisTraining = bondedDaysPerTraining[training];\r\n            energyGain += daysOnThisTraining * gains[6] * card.energy_discount;\r\n            energyGain += daysOnThisTraining * gains[6] * card.fs_energy;\r\n\r\n            let trainingGains = CalculateCrossTrainingGain(gains, weights, card, selectedCards, training, daysOnThisTraining, typeCount, true);\r\n            \r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n                info.non_rainbow_gains[stat] += trainingGains[stat];\r\n            }\r\n\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.energy_discount);\r\n            info.non_rainbow_gains[6] += (daysOnThisTraining * gains[6] * card.fs_energy);\r\n\r\n            if (training == 4 && card.group) {\r\n                energyGain += daysOnThisTraining * card.wisdom_recovery / 5;\r\n            }\r\n        }\r\n\r\n        info.rainbow_gains = [0,0,0,0,0,0,0];\r\n\r\n        // Stats from rainbows\r\n        if (cardType < 6) {\r\n            energyGain += rainbowTraining * card.wisdom_recovery;\r\n            let specialtyGains = weights.bondedTrainingGain[cardType];\r\n            if (weights.onlySummer) {\r\n                specialtyGains = weights.summerTrainingGain[cardType];\r\n            }\r\n            let trainingGains = CalculateTrainingGain(specialtyGains, weights, card, selectedCards, cardType, rainbowTraining, true, typeCount);\r\n\r\n            info.rainbow_gains = trainingGains.slice();\r\n            info.rainbow_gains.push(rainbowTraining * card.wisdom_recovery);\r\n\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += trainingGains[stat];\r\n            }\r\n        }\r\n\r\n        info.race_bonus_gains = 0;\r\n\r\n        // Race bonus\r\n        for (let raceType = 0; raceType < 4; raceType++) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                statGains[stat] += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\r\n                info.race_bonus_gains += raceRewards[raceType][stat] * (card.race_bonus / 100) * weights.races[raceType];\r\n            }\r\n        }\r\n\r\n        // Convert stat gains to score\r\n        score += GainsToScore(statGains, weights);\r\n        score += energyGain * weights.stats[6];\r\n\r\n        if(weights.scenarioLink.indexOf(card.char_name) > -1) {\r\n            score += weights.scenarioBonus;\r\n        }\r\n\r\n        processedCards.push({\r\n            id: card.id,\r\n            lb: card.limit_break,\r\n            score: score,\r\n            info: info,\r\n            char_name: card.char_name\r\n        })\r\n    }\r\n\r\n    processedCards.sort((a, b) => b.score - a.score);\r\n    return processedCards;\r\n}\r\n\r\nfunction CalculateTrainingGain(gains, weights, card, otherCards, trainingType, days, rainbow, typeCount) {\r\n    let trainingGains = [0,0,0,0,0,0,0];\r\n\r\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\r\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\r\n    let fsBonus = 1;\r\n    let motivationBonus = card.mb;\r\n    if (rainbow) {\r\n        fsBonus = card.fs_bonus * card.unique_fs_bonus;\r\n        motivationBonus += card.fs_motivation;\r\n        trainingBonus += card.fs_training;\r\n    }\r\n\r\n    let soloGain = [0,0,0,0,0,0];\r\n    for (let stat = 0; stat < 6; stat ++) {\r\n        if (gains[stat] === 0) continue;\r\n\r\n        let base = gains[stat] + card.stat_bonus[stat];\r\n        if (rainbow) {\r\n            base += card.fs_stats[stat];\r\n        }\r\n        soloGain[stat] += (base \r\n            * trainingBonus\r\n            * (1 + weights.motivation * motivationBonus)\r\n            * fsBonus\r\n            * 1.05\r\n            * weights.umaBonus[stat]\r\n            - gains[stat]);\r\n    }\r\n    if (GainsToScore(soloGain, weights) > weights.minimum) {\r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            trainingGains[stat] += soloGain[stat]\r\n                * days\r\n                * CalculateCombinationChance([], otherCards, trainingType)\r\n                * (rainbow ? weights.multi : 1);\r\n        }\r\n    }\r\n    \r\n    if (otherCards.length == 0) return trainingGains;\r\n\r\n    const combinations = GetCombinations(otherCards);\r\n\r\n    for (let i = 0; i < combinations.length; i++) {\r\n        let fullCombinationGains = [0,0,0,0,0,0];\r\n        let fullTotalGains = [0,0,0,0,0,0];\r\n        trainingBonus += (combinations[i].length + 1) * card.crowd_bonus;\r\n\r\n        const combinationTrainingBonus = combinations[i].reduce((current, c) => {\r\n            let training = current + (c.tb - 1) + (combinations[i].length * c.crowd_bonus);\r\n            if (typeCount >= c.highlander_threshold)\r\n                training += c.highlander_training;\r\n            return training;\r\n        }, 1);\r\n        const combinationFriendshipBonus = combinations[i].reduce((current, c) => {\r\n            if (c.cardType === trainingType) {\r\n                return current * c.fs_bonus * c.unique_fs_bonus;\r\n            } else {\r\n                return current;\r\n            }\r\n        }, 1);\r\n        const combinationMotivationBonus = combinations[i].reduce((current, c) => current + c.mb - 1, 1);\r\n        \r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            if (gains[stat] === 0) continue;\r\n            \r\n            const combinationStatBonus = combinations[i].reduce((current, c) => current + c.stat_bonus[stat], 0);\r\n            let base = gains[stat] + combinationStatBonus;\r\n            if (rainbow) {\r\n                base += card.fs_stats[stat];\r\n            }\r\n\r\n            let combinationGains = (base \r\n                * combinationTrainingBonus\r\n                * (1 + weights.motivation * combinationMotivationBonus)\r\n                * combinationFriendshipBonus\r\n                * (1.05 * combinations[i].length)\r\n                * weights.umaBonus[stat]);\r\n                \r\n            let totalGains = ((base + card.stat_bonus[stat])\r\n                * (combinationTrainingBonus + trainingBonus - 1)\r\n                * (1 + weights.motivation * (combinationMotivationBonus + motivationBonus - 1))\r\n                * (combinationFriendshipBonus * fsBonus)\r\n                * (1.05 * (combinations[i].length + 1))\r\n                * weights.umaBonus[stat]);\r\n            \r\n            fullCombinationGains[stat] += combinationGains;\r\n            fullTotalGains[stat] += totalGains;\r\n        }\r\n        trainingBonus -= (combinations[i].length + 1) * card.crowd_bonus;\r\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \r\n                    * days\r\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\r\n                    * (rainbow ? weights.multi : 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    return trainingGains;\r\n}\r\n\r\nfunction CalculateCrossTrainingGain(gains, weights, card, otherCards, trainingType, days, typeCount, bonded) {\r\n    let trainingGains = [0,0,0,0,0,0,0];\r\n    let statCards = otherCards.filter((c) => c.cardType === trainingType);\r\n    let trainingBonus = card.tb + card.fan_bonus * weights.fanBonus;\r\n    if (typeCount >= card.highlander_threshold) trainingBonus += card.highlander_training;\r\n    let fsBonus = 1;\r\n    if (card.group && bonded) {\r\n        fsBonus += (card.fs_bonus + card.unique_fs_bonus - 1) / 5;\r\n    }\r\n    const combinations = GetCombinations(otherCards);\r\n\r\n    for (let i = 0; i < combinations.length; i++) {\r\n        const combination = combinations[i];\r\n        let fullCombinationGains = [0,0,0,0,0,0];\r\n        let fullTotalGains = [0,0,0,0,0,0];\r\n        trainingBonus += (combination.length + 1) * card.crowd_bonus;\r\n\r\n        const combinationTrainingBonus = combination.reduce((current, c) => {\r\n            let training = current + (c.tb - 1) + (combination.length * c.crowd_bonus);\r\n            if (typeCount >= c.highlander_threshold)\r\n                training += c.highlander_training;\r\n            return training;\r\n        }, 1);\r\n        const combinationFriendshipBonus = combination.reduce((current, c) => {\r\n            if (c.cardType === trainingType) {\r\n                return current * c.fs_bonus * c.unique_fs_bonus;\r\n            } else {\r\n                return current;\r\n            }\r\n        }, 1);\r\n        const combinationMotivationBonus = combination.reduce((current, c) => current + c.mb - 1, 1);\r\n        \r\n        for (let stat = 0; stat < 6; stat ++) {\r\n            if (gains[stat] === 0) continue;\r\n            if(!combination.some((r) => statCards.indexOf(r) > -1)) continue;\r\n            \r\n            const combinationStatBonus = combination.reduce((current, c) => current + c.stat_bonus[stat], 0);\r\n            const base = gains[stat] + combinationStatBonus;\r\n\r\n            let combinationGains = (base \r\n                * combinationTrainingBonus\r\n                * (1 + weights.motivation * combinationMotivationBonus)\r\n                * combinationFriendshipBonus\r\n                * (1.05 * combination.length)\r\n                * weights.umaBonus[stat]);\r\n            \r\n            let totalGains = 0;\r\n            if (bonded) {\r\n                totalGains = ((base + card.stat_bonus[stat] + card.fs_stats[stat])\r\n                    * (combinationTrainingBonus + trainingBonus + card.fs_training - 1)\r\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb + card.fs_motivation - 1))\r\n                    * (combinationFriendshipBonus * fsBonus)\r\n                    * (1.05 * (combination.length + 1))\r\n                    * weights.umaBonus[stat]);\r\n            } else {\r\n                totalGains = ((base + card.stat_bonus[stat])\r\n                    * (combinationTrainingBonus + trainingBonus - 1)\r\n                    * (1 + weights.motivation * (combinationMotivationBonus + card.mb - 1))\r\n                    * (1.05 * (combination.length + 1))\r\n                    * weights.umaBonus[stat]);\r\n            }\r\n            \r\n            fullCombinationGains[stat] += combinationGains;\r\n            fullTotalGains[stat] += totalGains;\r\n        }\r\n        trainingBonus -= (combination.length + 1) * card.crowd_bonus;\r\n        if (GainsToScore(fullTotalGains, weights) > weights.minimum) {\r\n            for (let stat = 0; stat < 6; stat ++) {\r\n                trainingGains[stat] += (fullTotalGains[stat] - fullCombinationGains[stat]) \r\n                    * days\r\n                    * CalculateCombinationChance(combinations[i], otherCards, trainingType)\r\n                    * weights.multi;\r\n            }\r\n        }\r\n    }\r\n\r\n    return trainingGains;\r\n}\r\n\r\nfunction GainsToScore(gains, weights) {\r\n    let score = 0;\r\n    for (let stat = 0; stat < 6; stat ++) {\r\n        score += Math.min(gains[stat], weights.cap) * weights.stats[stat];\r\n    }\r\n    return score;\r\n}\r\n\r\nfunction GetCombinations(cards, minLength = 1) {\r\n    let combinations = [];\r\n    let temp = [];\r\n    const count = Math.pow(2, cards.length);\r\n\r\n    for (let i = 0; i < count; i++){\r\n        temp = [];\r\n        for (let j = 0; j<cards.length; j++) {\r\n            if (i & Math.pow(2,j)) { \r\n                temp.push(cards[j]);\r\n            }\r\n        }\r\n        if (temp.length >= minLength) {\r\n            combinations.push(temp);\r\n        }\r\n    }\r\n\r\n    return combinations;\r\n}\r\n\r\nfunction CalculateCombinationChance(combination, cards, trainingType) {\r\n    let chance = combination.reduce((current, card) => {\r\n        if (card.cardType === trainingType) {\r\n            return current * card.rainbowSpecialty;\r\n        } else {\r\n            return current * card.offSpecialty;\r\n        }\r\n    }, 1);\r\n    \r\n    if (cards) {\r\n        const otherCards = cards.filter((c) => combination.findIndex((d) => c.index == d.index) === -1);\r\n        chance = otherCards.reduce((current, card) => {\r\n            if (card.cardType === trainingType) {\r\n                return current * (1 - card.rainbowSpecialty);\r\n            } else {\r\n                return current * (1 - card.offSpecialty);\r\n            }\r\n        }, chance);\r\n    }\r\n\r\n    return chance;\r\n}\r\n\r\nexport default TierList;\r\n","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\Filters.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\Weights.js",["78","79","80","81","82","83","84"],[],"import React from 'react';\r\nimport NumericInput from 'react-numeric-input';\r\nimport SpeedIcon from '../icons/utx_ico_obtain_00.png';\r\nimport StaminaIcon from '../icons/utx_ico_obtain_01.png';\r\nimport PowerIcon from '../icons/utx_ico_obtain_02.png';\r\nimport GutsIcon from '../icons/utx_ico_obtain_03.png';\r\nimport WisdomIcon from '../icons/utx_ico_obtain_04.png';\r\nimport FriendIcon from '../icons/utx_ico_obtain_05.png';\r\nimport { lsTest } from '../utils';\r\n\r\nfunction defaultGMState() {\r\n    return {\r\n        version: 26,\r\n        currentState: \"speed\",\r\n        show: false,\r\n        general: {\r\n            bondPerDay: 15,\r\n            races: [10,2,0,5],\r\n            unbondedTrainingGain: [\r\n                [10,0,3,0,0,5,19],\r\n                [0,8,0,6,0,5,20],\r\n                [0,4,9,0,0,5,20],\r\n                [2,0,3,9,0,5,20],\r\n                [2,0,0,0,8,5,0]\r\n            ],\r\n            bondedTrainingGain: [\r\n                [13,0,4,0,0,5,23],\r\n                [0,9,0,6,0,5,21],\r\n                [0,4,10,0,0,5,21],\r\n                [3,0,3,12,0,5,24],\r\n                [3,0,0,0,11,5,0]\r\n            ],\r\n            summerTrainingGain: [\r\n                [14,0,5,0,0,5,24],\r\n                [0,12,0,8,0,5,25],\r\n                [0,6,13,0,0,5,25],\r\n                [4,0,4,13,0,5,25],\r\n                [4,0,0,0,12,5,0]\r\n            ],\r\n            umaBonus: [1.06,1.06,1.06,1.06,1.06,1],\r\n            multi: 1.25,\r\n            bonusSpec: 0,\r\n            motivation: 0.2,\r\n            scenarioLink: [\r\n                \"ダーレーアラビアン\"\r\n            ],\r\n            scenarioBonus: 150,\r\n            fanBonus: 0.1,\r\n        },\r\n        speed: {\r\n            type: 0,\r\n            stats: [1.1,1,2,1,1,2,1.5],\r\n            cap:600,\r\n            minimum: 20,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        stamina: {\r\n            type: 1,\r\n            stats: [1,1,1,1.1,1,2,1.5],\r\n            cap:550,\r\n            minimum: 20,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        power: {\r\n            type: 2,\r\n            stats: [1,1.1,1,1,1,2,1.5],\r\n            cap:550,\r\n            minimum: 20,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        guts: {\r\n            type: 3,\r\n            stats: [2,1,2,1,1,2,1.5],\r\n            cap:550,\r\n            minimum: 20,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        wisdom: {\r\n            type: 4,\r\n            stats: [1.1,1,1,1,1.1,2,1],\r\n            cap:600,\r\n            minimum: 20,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        friend: {\r\n            type: 6,\r\n            stats: [1,1,1,1,1,2,0.75],\r\n            cap:500,\r\n            minimum: 20,\r\n        }\r\n    }\r\n}\r\n\r\nfunction defaultGLState() {\r\n    return {\r\n        version: 18,\r\n        currentState: \"speed\",\r\n        show: false,\r\n        general: {\r\n            bondPerDay: 20,\r\n            races: [7,2,0,3],\r\n            unbondedTrainingGain: [\r\n                [8,0,4,0,0,2,19],\r\n                [0,8,0,6,0,2,20],\r\n                [0,4,9,0,0,2,20],\r\n                [2,0,2,7,0,2,20],\r\n                [2,0,0,0,6,3,0]\r\n            ],\r\n            bondedTrainingGain: [\r\n                [11,0,5,0,0,2,23],\r\n                [0,9,0,6,0,2,21],\r\n                [0,4,10,0,0,2,21],\r\n                [3,0,2,10,0,2,24],\r\n                [3,0,0,0,9,3,0]\r\n            ],\r\n            summerTrainingGain: [\r\n                [12,0,6,0,0,2,24],\r\n                [0,12,0,8,0,2,25],\r\n                [0,6,13,0,0,2,25],\r\n                [3,0,3,11,0,2,25],\r\n                [4,0,0,0,10,3,0]\r\n            ],\r\n            umaBonus: [1.06,1.06,1.06,1.06,1.06,1],\r\n            multi: 1.4,\r\n            bonusSpec: 20,\r\n            motivation: 0.2,\r\n            scenarioLink: [\r\n                \"ミホノブルボン\",\r\n                \"ライトハロー\",\r\n                \"スマートファルコン\",\r\n                \"アグネスタキオン\",\r\n                \"サイレンススズカ\",\r\n            ],\r\n            scenarioBonus: 75,\r\n            fanBonus: 0.05,\r\n        },\r\n        speed: {\r\n            type: 0,\r\n            stats: [1.1,1,1.2,1,1,0.5,1.5],\r\n            cap:600,\r\n            minimum: 35,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        stamina: {\r\n            type: 1,\r\n            stats: [1,1,1,1.1,1,0.5,1.5],\r\n            cap:550,\r\n            minimum: 35,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        power: {\r\n            type: 2,\r\n            stats: [1,1.1,1,1,1,0.5,1.5],\r\n            cap:550,\r\n            minimum: 35,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        guts: {\r\n            type: 3,\r\n            stats: [2,1,2,1,1,0.5,1.5],\r\n            cap:550,\r\n            minimum: 30,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        wisdom: {\r\n            type: 4,\r\n            stats: [1.1,1,1,1,1.1,0.5,1],\r\n            cap:600,\r\n            minimum: 30,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        friend: {\r\n            type: 6,\r\n            stats: [1,1,1,1,1,0.5,0.75],\r\n            cap:500,\r\n            minimum: 30,\r\n        }\r\n    }\r\n}\r\n\r\nfunction defaultMANTState() {\r\n    return {\r\n        version: 18,\r\n        currentState: \"speed\",\r\n        show: false,\r\n        general: {\r\n            bondPerDay: 20,\r\n            races: [15,10,2,3],\r\n            unbondedTrainingGain: [\r\n                [8,0,4,0,0,2,19],\r\n                [0,7,0,3,0,2,17],\r\n                [0,4,6,0,0,2,18],\r\n                [3,0,3,6,0,2,20],\r\n                [2,0,0,0,6,3,0]\r\n            ],\r\n            bondedTrainingGain: [\r\n                [10,0,4,0,0,2,21],\r\n                [0,8,0,3,0,2,18],\r\n                [0,4,7,0,0,2,19],\r\n                [4,0,3,9,0,2,24],\r\n                [3,0,0,0,9,3,0]\r\n            ],\r\n            summerTrainingGain: [\r\n                [12,0,6,0,0,2,24],\r\n                [0,11,0,5,0,2,22],\r\n                [0,6,10,0,0,2,23],\r\n                [4,0,4,10,0,2,25],\r\n                [4,0,0,0,10,3,0]\r\n            ],\r\n            umaBonus: [1.06,1.06,1.06,1.06,1.06,1],\r\n            multi: 1.4,\r\n            bonusSpec: 0,\r\n            motivation: 0.2,\r\n            scenarioLink: [],\r\n            scenarioBonus: 0,\r\n            fanBonus: 0.15\r\n        },\r\n        speed: {\r\n            type: 0,\r\n            stats: [1,1,1.1,1,1,0.5,1],\r\n            cap:350,\r\n            minimum: 50,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        stamina: {\r\n            type: 1,\r\n            stats: [1,1,1,1.1,1,0.5,1],\r\n            cap:350,\r\n            minimum: 40,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        power: {\r\n            type: 2,\r\n            stats: [1,1.1,1,1,1,0.5,1],\r\n            cap:350,\r\n            minimum: 50,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        guts: {\r\n            type: 3,\r\n            stats: [2,1,2,1,1,0.5,1],\r\n            cap:350,\r\n            minimum: 50,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        wisdom: {\r\n            type: 4,\r\n            stats: [1.1,1,1,1,1,0.5,1],\r\n            cap:350,\r\n            minimum: 40,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        friend: {\r\n            type: 6,\r\n            stats: [1,1,1,1,1,0.5,0.5],\r\n            cap:350,\r\n            minimum: 40,\r\n        }\r\n    }\r\n}\r\n\r\nfunction defaultAoharuState() {\r\n    return {\r\n        version: 18,\r\n        currentState: \"wisdom\",\r\n        show: false,\r\n        general: {\r\n            bondPerDay: 20,\r\n            races: [7,2,0,3],\r\n            unbondedTrainingGain: [\r\n                [8,0,4,0,0,4,19],\r\n                [0,8,0,6,0,4,20],\r\n                [0,4,9,0,0,4,20],\r\n                [3,0,3,6,0,4,20],\r\n                [2,0,0,0,6,5,0]\r\n            ],\r\n            bondedTrainingGain: [\r\n                [12,0,5,0,0,4,24],\r\n                [0,12,0,7,0,4,25],\r\n                [0,5,13,0,0,4,25],\r\n                [4,0,3,10,0,4,25],\r\n                [3,0,0,0,10,5,0]\r\n            ],\r\n            summerTrainingGain: [\r\n                [13,0,6,0,0,4,25],\r\n                [0,13,0,8,0,4,26],\r\n                [0,6,14,0,0,4,26],\r\n                [4,0,4,11,0,4,26],\r\n                [4,0,0,0,11,5,0]\r\n            ],\r\n            umaBonus: [1.06,1.06,1.06,1.06,1.06,1],\r\n            multi: 1,\r\n            bonusSpec: 0,\r\n            motivation: 0.2,\r\n            scenarioLink: [\r\n                \"マチカネフクキタル\",\r\n                \"ハルウララ\",\r\n                \"樫本理子\",\r\n                \"ライスシャワー\",\r\n                \"タイキシャトル\"\r\n            ],\r\n            scenarioBonus: 40,\r\n            fanBonus: 0.05\r\n        },\r\n        speed: {\r\n            type: 0,\r\n            stats: [1,1.5,1.5,1,1,0.5,1],\r\n            cap:550,\r\n            minimum: 40,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        stamina: {\r\n            type: 1,\r\n            stats: [1,1.5,1.5,1.1,1,0.5,1],\r\n            cap:400,\r\n            minimum: 30,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        power: {\r\n            type: 2,\r\n            stats: [1,1.5,1.5,1,1,0.5,1],\r\n            cap:400,\r\n            minimum: 30,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        guts: {\r\n            type: 3,\r\n            stats: [2,1.5,2,1,1,0.5,1],\r\n            cap:500,\r\n            minimum: 40,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        wisdom: {\r\n            type: 4,\r\n            stats: [1.2,1,1,1,1.5,1,0.5],\r\n            cap:900,\r\n            minimum: 30,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        friend: {\r\n            type: 6,\r\n            stats: [1,1.5,1.5,1,1,0.5,0.5],\r\n            cap:500,\r\n            minimum: 40,\r\n        }\r\n    }\r\n}\r\n\r\nfunction defaultURAState() {\r\n    return {\r\n        version: 18,\r\n        currentState: \"speed\",\r\n        show: false,\r\n        general: {\r\n            bondPerDay: 20,\r\n            races: [7,2,0,3],\r\n            unbondedTrainingGain: [\r\n                [11,0,6,0,0,4,21],\r\n                [0,10,0,6,0,4,19],\r\n                [0,6,9,0,0,4,20],\r\n                [5,0,5,8,0,4,22],\r\n                [2,0,0,0,10,5,0]\r\n            ],\r\n            bondedTrainingGain: [\r\n                [13,0,6,0,0,4,23],\r\n                [0,11,0,6,0,4,21],\r\n                [0,6,11,0,0,4,22],\r\n                [5,0,5,10,0,4,24],\r\n                [2,0,0,0,12,5,0]\r\n            ],\r\n            summerTrainingGain: [\r\n                [15,0,8,0,0,4,24],\r\n                [0,14,0,7,0,4,25],\r\n                [0,8,13,0,0,4,25],\r\n                [6,0,6,12,0,4,25],\r\n                [4,0,0,0,14,5,0]\r\n            ],\r\n            umaBonus: [1.06,1.06,1.06,1.06,1.06,1],\r\n            multi: 1,\r\n            bonusSpec: 0,\r\n            motivation: 0.2,\r\n            scenarioLink: [\"桐生院葵\"],\r\n            scenarioBonus: 16,\r\n            fanBonus: 0.05\r\n        },\r\n        speed: {\r\n            type: 0,\r\n            stats: [1,1.5,1.5,1,1,0.5,1],\r\n            cap:500,\r\n            minimum: 40,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        stamina: {\r\n            type: 1,\r\n            stats: [1,1.5,1.5,1.1,1,0.5,1],\r\n            cap:400,\r\n            minimum: 30,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        power: {\r\n            type: 2,\r\n            stats: [1,1.5,1.5,1,1,0.5,1],\r\n            cap:400,\r\n            minimum: 30,\r\n            prioritize: false,\r\n            onlySummer: false,\r\n        },\r\n        guts: {\r\n            type: 3,\r\n            stats: [2,1.5,2,1,1,0.5,1],\r\n            cap:500,\r\n            minimum: 40,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        wisdom: {\r\n            type: 4,\r\n            stats: [1.1,1.5,1.5,1,1,0.5,1],\r\n            cap:500,\r\n            minimum: 30,\r\n            prioritize: true,\r\n            onlySummer: false,\r\n        },\r\n        friend: {\r\n            type: 6,\r\n            stats: [1,1.5,1.5,1,1,0.5,0.5],\r\n            cap:500,\r\n            minimum: 40,\r\n        }\r\n    }\r\n}\r\n\r\nclass Weights extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n        this.onGeneralSettingChanged = this.onGeneralSettingChanged.bind(this);\r\n        this.onTypeChanged = this.onTypeChanged.bind(this);\r\n        this.onCapChanged = this.onCapChanged.bind(this);\r\n        this.onMinimumChanged = this.onMinimumChanged.bind(this);\r\n        this.onToggleWeights = this.onToggleWeights.bind(this);\r\n        this.onMotivationChanged = this.onMotivationChanged.bind(this);\r\n        this.onMANTReset = this.onMANTReset.bind(this);\r\n        this.onURAReset = this.onURAReset.bind(this);\r\n        this.onAoharuReset = this.onAoharuReset.bind(this);\r\n        this.onGLReset = this.onGLReset.bind(this);\r\n        this.onGMReset = this.onGMReset.bind(this);\r\n\r\n        if(lsTest()) {\r\n            let savedWeights = window.localStorage.getItem(\"weights\");\r\n            if (savedWeights !== null) {\r\n                savedWeights = JSON.parse(savedWeights);\r\n                if (savedWeights.version == defaultMANTState().version) {\r\n                    this.state = savedWeights;\r\n                    return this.props.onChange(this.state[this.state.currentState], this.state.general);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = defaultGMState();\r\n        this.props.onChange(this.state[this.state.currentState], this.state.general);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevState && prevState !== this.state && lsTest()) {\r\n            window.localStorage.setItem(\"weights\", JSON.stringify(this.state));\r\n        }\r\n    }\r\n\r\n    onGLReset() {\r\n        let newState = defaultGLState();\r\n        this.setState(newState);\r\n        this.props.onChange(newState[newState.currentState], newState.general);\r\n    }\r\n\r\n    onMANTReset() {\r\n        let newState = defaultMANTState();\r\n        this.setState(newState);\r\n        this.props.onChange(newState[newState.currentState], newState.general);\r\n    }\r\n\r\n    onURAReset() {\r\n        let newState = defaultURAState();\r\n        this.setState(newState);\r\n        this.props.onChange(newState[newState.currentState], newState.general);\r\n    }\r\n\r\n    onAoharuReset() {\r\n        let newState = defaultAoharuState();\r\n        this.setState(newState);\r\n        this.props.onChange(newState[newState.currentState], newState.general);\r\n    }\r\n\r\n    onGMReset() {\r\n        let newState = defaultGMState();\r\n        this.setState(newState);\r\n        this.props.onChange(newState[newState.currentState], newState.general);\r\n    }\r\n\r\n    onSettingChanged(event, numberString, numberInput) {\r\n        if (!event) return;\r\n\r\n        let settings = this.state[this.state.currentState];\r\n\r\n        if (typeof event === \"number\") {\r\n            if (numberInput.id.indexOf('.') > 0) {\r\n                let split = numberInput.id.split('.');\r\n                settings[split[0]][split[1]] = event;\r\n            } else {\r\n                settings[numberInput.id] = event;\r\n            }\r\n        }\r\n        else {\r\n            settings[event.target.id] = !settings[event.target.id];\r\n        }\r\n\r\n        let newSettings = {};\r\n        newSettings[this.state.currentState] = settings;\r\n        this.setState(newSettings);\r\n\r\n        this.props.onChange(settings, this.state.general);\r\n    }\r\n\r\n    onGeneralSettingChanged(event, numberString, numberInput) {\r\n        if (!event) return;\r\n\r\n        let settings = this.state.general;\r\n\r\n        if (typeof event === \"number\") {\r\n            if (numberInput.id.indexOf('.') > 0) {\r\n                let split = numberInput.id.split('.');\r\n                settings[split[0]][split[1]] = event;\r\n            } else {\r\n                settings[numberInput.id] = event;\r\n            }\r\n        }\r\n        else {\r\n            settings[event.target.id] = !settings[event.target.id];\r\n        }\r\n\r\n        let newSettings = {};\r\n        newSettings.general = settings;\r\n        this.setState(newSettings);\r\n\r\n        this.props.onChange(this.state[this.state.currentState], settings);\r\n    }\r\n\r\n    onMotivationChanged(event) {\r\n        let settings = this.state.general;\r\n        settings.motivation = event.target.value;\r\n        let newSettings = {};\r\n        newSettings.general = settings;\r\n        this.setState(newSettings);\r\n        this.props.onChange(this.state[this.state.currentState], settings);\r\n    }\r\n\r\n    onTypeChanged(event) {\r\n        this.setState({\r\n            currentState: event.target.id\r\n        });\r\n\r\n        this.props.onChange(this.state[event.target.id], this.state.general);\r\n    }\r\n\r\n    onCapChanged(event) {\r\n        let settings = this.state[this.state.currentState];\r\n        settings.cap = event.target.value;\r\n        let newSettings = {};\r\n        newSettings[this.state.currentState] = settings;\r\n        this.setState(newSettings);\r\n        this.props.onChange(settings, this.state.general);\r\n    }\r\n\r\n    onMinimumChanged(event) {\r\n        let settings = this.state[this.state.currentState];\r\n        settings.minimum = event.target.value;\r\n        let newSettings = {};\r\n        newSettings[this.state.currentState] = settings;\r\n        this.setState(newSettings);\r\n        this.props.onChange(settings, this.state.general);\r\n    }\r\n\r\n    onToggleWeights(event) {\r\n        this.setState({show: !this.state.show});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"weights\">\r\n                <div className=\"weight-row\">\r\n                    <input id=\"speed\" type=\"image\" class={this.state.currentState == \"speed\" ? \"image-btn selected\" : \"image-btn\"} src={SpeedIcon} onClick={this.onTypeChanged} alt=\"Speed\"/>\r\n                    <input id=\"stamina\" type=\"image\" class={this.state.currentState == \"stamina\" ? \"image-btn selected\" : \"image-btn\"} src={StaminaIcon} onClick={this.onTypeChanged} alt=\"Stamina\"/>\r\n                    <input id=\"power\" type=\"image\" class={this.state.currentState == \"power\" ? \"image-btn selected\" : \"image-btn\"} src={PowerIcon} onClick={this.onTypeChanged} alt=\"Power\"/>\r\n                    <input id=\"guts\" type=\"image\" class={this.state.currentState == \"guts\" ? \"image-btn selected\" : \"image-btn\"} src={GutsIcon} onClick={this.onTypeChanged} alt=\"Guts\"/>\r\n                    <input id=\"wisdom\" type=\"image\" class={this.state.currentState == \"wisdom\" ? \"image-btn selected\" : \"image-btn\"} src={WisdomIcon} onClick={this.onTypeChanged} alt=\"Wisdom\"/>\r\n                    <input id=\"friend\" type=\"image\" class={this.state.currentState == \"friend\" ? \"image-btn selected\" : \"image-btn\"} src={FriendIcon} onClick={this.onTypeChanged} alt=\"Friend\"/>\r\n                </div>\r\n                <div className=\"weight-row\">\r\n                    <button id=\"weights-toggle\" type=\"button\" onClick={this.onToggleWeights}>{this.state.show ? \"Hide Settings\" : \"Customize Settings\"}</button>\r\n                </div>\r\n                {\r\n                    this.state.show &&\r\n                    <>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Scenario</div>\r\n                        <div class=\"section-explanation\">\r\n                            Which scenario you're playing in.<br/>\r\n                            Changes the stat gains from trainings and some default values.\r\n                        </div>\r\n                        <button id=\"reset-weights-GL\" type=\"button\" onClick={this.onGMReset}>GM</button>\r\n                        <button id=\"reset-weights-GL\" type=\"button\" onClick={this.onGLReset}>GL</button>\r\n                        <button id=\"reset-weights-MANT\" type=\"button\" onClick={this.onMANTReset}>MANT</button>\r\n                        <button id=\"reset-weights-URA\" type=\"button\" onClick={this.onAoharuReset}>Aoharu</button>\r\n                        <button id=\"reset-weights-URA\" type=\"button\" onClick={this.onURAReset}>URA</button>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Bond Rate</div>\r\n                        <div class=\"section-explanation\">\r\n                            The fewer bond per turn, the more Starting Bond matters.<br/>\r\n                            This is the bond over every card, so 14 = two cards per day, etc.\r\n                        </div>\r\n                        <label for=\"bondPerDay\">Bond Gained per Turn:</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"bondPerDay\" value={this.state.general.bondPerDay} min={1} max={50} step={0.1}/>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Optional Races</div>\r\n                        <div class=\"section-explanation\">\r\n                            How many of each optional race class you do, for calculating Race Bonus points.\r\n                        </div>\r\n                        <label for=\"races.0\">G1</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"races.0\" value={this.state.general.races[0]} min={0} max={30} step={1}/>\r\n                        <label for=\"races.1\">G2/G3</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"races.1\" value={this.state.general.races[1]} min={0} max={30} step={1}/>\r\n                        <label for=\"races.2\">OP/Pre-OP</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"races.2\" value={this.state.general.races[2]} min={0} max={30} step={1}/>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Scenario Specific</div>\r\n                        <div class=\"section-explanation\">\r\n                            Multiplier accounts for MANT items and GL friendship songs.<br/>\r\n                            Bonus Specialty is for Grand Live song bonuses.\r\n                        </div>\r\n                        <label for=\"multi\">Multiplier:</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"multi\" value={this.state.general.multi} min={1} max={2.2} step={0.05}/>\r\n                        <label for=\"bonusSpec\">Bonus Specialty:</label>\r\n                        <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"bonusSpec\" value={this.state.general.bonusSpec} min={-1} max={95} step={5}/>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Stat Weights</div>\r\n                        <div class=\"section-explanation\">\r\n                            How much score each point of the given stat/resource gives.\r\n                        </div>\r\n                        <label for=\"stats.0\">Speed</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.0\" value={this.state[this.state.currentState].stats[0]} min={0} max={3} step={0.1}/>\r\n                        <label for=\"stats.1\">Stamina</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.1\" value={this.state[this.state.currentState].stats[1]} min={0} max={3} step={0.1}/>\r\n                        <label for=\"stats.2\">Power</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.2\" value={this.state[this.state.currentState].stats[2]} min={0} max={3} step={0.1}/>\r\n                        <label for=\"stats.3\">Guts</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.3\" value={this.state[this.state.currentState].stats[3]} min={0} max={3} step={0.1}/>\r\n                        <label for=\"stats.4\">Wisdom</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.4\" value={this.state[this.state.currentState].stats[4]} min={0} max={3} step={0.1}/>\r\n                        <br/><br/><label for=\"stats.5\">Skill Points</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.5\" value={this.state[this.state.currentState].stats[5]} min={0} max={3} step={0.1}/>\r\n                        <label for=\"stats.6\">Energy</label>\r\n                        <NumericInput onChange={this.onSettingChanged} type=\"number\" id=\"stats.6\" value={this.state[this.state.currentState].stats[6]} min={0} max={3} step={0.1}/>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Average Motivation</div>\r\n                        <div class=\"section-explanation\">\r\n                            You get 10% per motivation stage. This affects Motivation Bonus.\r\n                        </div>\r\n                        <input type=\"range\" onChange={this.onMotivationChanged} min={-0.2} max={0.2} step={0.05} value={this.state.general.motivation} class=\"slider\" id=\"motivation\"/>\r\n                        <label for=\"minimum\">{this.state.general.motivation * 100}%</label>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Stat Cap</div>\r\n                        <div class=\"section-explanation\">\r\n                            This will cap the stat gain, penalizing cards that only raise one stat.<br/>\r\n                            Lower this if you tend to cap your stats very early to strengthen cards that raise multiple.\r\n                        </div>\r\n                        <input type=\"range\" onChange={this.onCapChanged} min={300} max={1000} step={20} value={this.state[this.state.currentState].cap} class=\"slider\" id=\"cap\"/>\r\n                        <label for=\"cap\">{this.state[this.state.currentState].cap}</label>\r\n                    </div>\r\n                    <div className=\"weight-row\">\r\n                        <div class=\"section-header\">Minimum Training Value</div>\r\n                        <div class=\"section-explanation\">\r\n                            Any training combination that gives less than this will be ignored.<br/>\r\n                            Increase this to ignore trainings you wouldn't do, such as lone rainbows.<br/>\r\n                            Solo MLB Kitasan rainbow is about 40, depending on the weights, for reference.\r\n                        </div>\r\n                        <input type=\"range\" onChange={this.onMinimumChanged} min={20} max={100} step={5} value={this.state[this.state.currentState].minimum} class=\"slider\" id=\"minimum\"/>\r\n                        <label for=\"minimum\">{this.state[this.state.currentState].minimum}</label>\r\n                    </div>\r\n                    {this.state.currentState !== \"friend\" &&\r\n                        <div className=\"weight-row\">\r\n                            <div class=\"section-header\">Rainbow Rate Alterations</div>\r\n                            <div class=\"section-explanation\">\r\n                                If this option is disabled, then single rainbows in this stat<br/>\r\n                                will be ignored if any other stat is rainbowing at the same time.\r\n                            </div>\r\n                            <input type=\"checkbox\" onChange={this.onSettingChanged} checked={this.state[this.state.currentState].prioritize} id=\"prioritize\"/>\r\n                            <label for=\"prioritize\">Prioritize This Stat</label>\r\n                            <div class=\"section-explanation\">\r\n                                If this option is enabled, then all rainbows will be ignored<br/>\r\n                                in this stat unless it's summer. Assumes 8 summer turns. Sorry Bakushin.\r\n                            </div>\r\n                            <input type=\"checkbox\" onChange={this.onSettingChanged} checked={this.state[this.state.currentState].onlySummer} id=\"onlySummer\"/>\r\n                            <label for=\"onlySummer\">Only Train In Summer</label>\r\n                        </div>\r\n                    }\r\n                    </>\r\n                }\r\n                <div className=\"weight-row\">\r\n                    <div class=\"section-header\">Uma's Bonuses</div>\r\n                    <div class=\"section-explanation\">\r\n                        The percentages on the uma's stat screen, converted to decimal. <br/>\r\n                        For example, 10% is 1.1, and 15% is 1.15.\r\n                    </div>\r\n                    <label for=\"umaBonus.0\">Speed</label>\r\n                    <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"umaBonus.0\" value={this.state.general.umaBonus[0]} min={0.7} max={1.3} step={0.01} precision={2}/>\r\n                    <label for=\"umaBonus.1\">Stamina</label>\r\n                    <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"umaBonus.1\" value={this.state.general.umaBonus[1]} min={0.7} max={1.3} step={0.01} precision={2}/>\r\n                    <label for=\"umaBonus.2\">Power</label>\r\n                    <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"umaBonus.2\" value={this.state.general.umaBonus[2]} min={0.7} max={1.3} step={0.01} precision={2}/>\r\n                    <label for=\"umaBonus.3\">Guts</label>\r\n                    <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"umaBonus.3\" value={this.state.general.umaBonus[3]} min={0.7} max={1.3} step={0.01} precision={2}/>\r\n                    <label for=\"umaBonus.4\">Wisdom</label>\r\n                    <NumericInput onChange={this.onGeneralSettingChanged} type=\"number\" id=\"umaBonus.4\" value={this.state.general.umaBonus[4]} min={0.7} max={1.3} step={0.01} precision={2}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weights;","C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\SelectedCards.js",["85"],[],"import React from 'react';\r\nimport SpeedIcon from '../icons/utx_ico_obtain_00.png';\r\nimport StaminaIcon from '../icons/utx_ico_obtain_01.png';\r\nimport PowerIcon from '../icons/utx_ico_obtain_02.png';\r\nimport GutsIcon from '../icons/utx_ico_obtain_03.png';\r\nimport WisdomIcon from '../icons/utx_ico_obtain_04.png';\r\nimport FriendIcon from '../icons/utx_ico_obtain_05.png';\r\nimport events from '../card-events';\r\nconst raceRewards = [\r\n    10,\r\n    8,\r\n    5\r\n]\r\n\r\nconst type_to_icon = [\r\n    SpeedIcon,\r\n    StaminaIcon,\r\n    PowerIcon,\r\n    GutsIcon,\r\n    WisdomIcon,\r\n    \"\",\r\n    FriendIcon,\r\n]\r\n\r\nfunction SelectedCards(props) {\r\n    let cards = [];\r\n    let raceBonus = 0;\r\n    let statsNoTraining = [120,120,120,120,120];\r\n    \r\n    for (let i = 0; i < props.selectedCards.length; i++) {\r\n        let lit_up = \"\";\r\n        let dark = \"\";\r\n        let card = props.selectedCards[i];\r\n        raceBonus += card.race_bonus;\r\n\r\n        for(let j = 0; j < 4; j++) {\r\n            if (j < card.limit_break) {\r\n                lit_up += \"◆\";\r\n            } else {\r\n                dark += \"◆\";\r\n            }\r\n        }\r\n\r\n        for (let stat = 0; stat < 5; stat++) {\r\n            if (events[card.id]) {\r\n                statsNoTraining[stat] += events[card.id][stat] * card.effect_size_up;\r\n            }\r\n            statsNoTraining[stat] += card.starting_stats[stat];\r\n        }\r\n\r\n        cards.push(\r\n            <div className=\"support-card\">\r\n                <img\r\n                    className=\"support-card-image\"\r\n                    name={card.id}\r\n                    src={process.env.PUBLIC_URL + \"/cardImages/support_card_s_\" + card.id + \".png\"}\r\n                    title={card.id}\r\n                    alt={card.id}\r\n                    onClick={() => props.onClick(card)}\r\n                />\r\n                <img\r\n                    className=\"type-icon\"\r\n                    name=\"type icon\"\r\n                    src={type_to_icon[card.type]}\r\n                    title=\"type\"\r\n                    alt=\"card type\"\r\n                    onClick={() => props.onClick(card)}\r\n                />\r\n                <span className=\"limit-breaks\">\r\n                    <span className=\"lb-yes\">{lit_up}</span>\r\n                    <span className=\"lb-no\">{dark}</span>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let raceMultiplier = 1 + (raceBonus / 100);\r\n    for (let i = 0; i < 3; i++) {\r\n        let raceGain = Math.floor(raceRewards[i] * raceMultiplier);\r\n        raceGain = raceGain * props.weights.races[i];\r\n        for (let stat = 0; stat < 5; stat++) {\r\n            statsNoTraining[stat] += raceGain / 5;\r\n        }\r\n    }\r\n\r\n    for (let stat = 0; stat < 5; stat++) {\r\n        statsNoTraining[stat] += Math.floor(13.5 * raceMultiplier) * 3;\r\n        statsNoTraining[stat] = Math.round(statsNoTraining[stat]);\r\n    }\r\n\r\n    console.log(\"Stat gains without training: \");\r\n    console.log(statsNoTraining);\r\n\r\n    return (\r\n        <div className=\"selected-cards\">\r\n            <div className=\"section-header\">Support Deck</div>\r\n            <div className=\"section-explanation\">\r\n                The cards you're using. Click one to remove it, and click one in the tier list to add it.<br/>\r\n                The score will consider the stats gained when training with these cards.\r\n            </div>\r\n            {cards}\r\n            <div>\r\n                Total Race Bonus: <b>{raceBonus}</b> <i>(aim for 35 for URA/Aoharu, 50 for MANT)</i>\r\n            </div>\r\n            <div class=\"link\">\r\n                <a href={getEventHelperURL(props.selectedCards)} target=\"_blank\">Open in Gametora Event Helper</a>\r\n            </div>\r\n            <div>\r\n                Presets:\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([20023,20033,20009,20003,30137])}>Speed/Power</button>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([20023,20033,20008,30022,30137])}>Speed/Stamina</button>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([20023,20033,20012,20002,30137])}>Speed/Int</button>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([30028,20048,20041,20012,20002])}>Guts/Int</button>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([20012,20016,20025,20002,10060])}>Aoharu Parent</button>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([30028,20008,20009,30019,20012])}>Highlander</button>\r\n                <button className=\"btn-preset\" onClick={()=>props.onLoadPreset([20031,30074,20027,20012,30054])}>Race Bonus</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getEventHelperURL(selectedCards) {\r\n    let url = \"https://gametora.com/umamusume/training-event-helper?deck=mp4y-\";\r\n\r\n    let ids = selectedCards.map(c => c.id);\r\n    while (ids.length < 6) ids.push(10000)\r\n\r\n    url += parseInt(`${ids[0]}${ids[1]}${ids[2]}`, 10).toString(36);\r\n    url += \"-\";\r\n    url += parseInt(`${ids[3]}${ids[4]}${ids[5]}`, 10).toString(36);\r\n\r\n    return url;\r\n}\r\n\r\nexport default SelectedCards;","C:\\Users\\Chun\\ChunAlt.github.io\\src\\cards.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\constants.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\card-events.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\utils.js",[],[],"C:\\Users\\Chun\\ChunAlt.github.io\\src\\components\\SupportCard.js",["86","87","88","89"],[],"import React from 'react';\r\nimport { supportCardProperties } from '../constants';\r\n\r\nfunction SupportCard(props) {\r\n    let lit_up = \"\";\r\n    let dark = \"\";\r\n    \r\n    for(let i = 0; i < 4; i++) {\r\n        if (i < props.lb) {\r\n            lit_up += \"◆\";\r\n        } else {\r\n            dark += \"◆\";\r\n        }\r\n    }\r\n\r\n    let statDisplays = [\"\",\"\",\"\"];\r\n\r\n    for(let i=0; i<3; i++) {\r\n        let stat = props.stats[i];\r\n        if (stat == \"none\") continue;\r\n        let value = props.card[stat];\r\n        if (stat == \"fs_bonus\") {\r\n            console.log(\"pre: \" + value);\r\n            value *= props.card[\"unique_fs_bonus\"];\r\n            console.log(value);\r\n        } else if (stat == \"specialty_rate\") {\r\n            value = (value + 100) * props.card[\"unique_specialty\"] * props.card[\"fs_specialty\"] - 100;\r\n        }\r\n        if (value < 1) {\r\n            value *= 100;\r\n        } else if (value < 2 && stat != \"race_bonus\") {\r\n            value -= 1;\r\n            value *= 100;\r\n        }\r\n        value = Math.round(value);\r\n        statDisplays[i] = `${value}${supportCardProperties[stat].shorthand}`;\r\n    }\r\n\r\n    const alreadySelected = props.selected.indexOf(props.charName) > -1;\r\n\r\n    return (\r\n        <div className=\"support-card\">\r\n            <img\r\n                className={alreadySelected ? \"support-card-image selected\" : \"support-card-image\"}\r\n                name={props.id}\r\n                src={process.env.PUBLIC_URL + \"/cardImages/support_card_s_\" + props.id + \".png\"}\r\n                title={props.charName}\r\n                alt={props.charName}\r\n                onClick={alreadySelected ? ()=>{} : props.onClick}\r\n            />\r\n            <span className=\"limit-breaks\">\r\n                <span className=\"lb-yes\">{lit_up}</span>\r\n                <span className=\"lb-no\">{dark}</span>\r\n            </span>\r\n            <span className=\"score\" onClick={() => console.log(props.info)}>\r\n                {Math.round(props.score)}\r\n            </span>\r\n            <span className=\"stat-1\">\r\n                {statDisplays[0]}\r\n            </span>\r\n            <span className=\"stat-2\">\r\n                {statDisplays[1]}\r\n            </span>\r\n            <span className=\"stat-3\">\r\n                {statDisplays[2]}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SupportCard;",{"ruleId":"90","severity":1,"message":"91","line":9,"column":7,"nodeType":"92","messageId":"93","endLine":9,"endColumn":14},{"ruleId":"90","severity":1,"message":"94","line":10,"column":7,"nodeType":"92","messageId":"93","endLine":10,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":94,"column":67,"nodeType":"97","messageId":"98","endLine":94,"endColumn":69},{"ruleId":"95","severity":1,"message":"96","line":145,"column":35,"nodeType":"97","messageId":"98","endLine":145,"endColumn":37},{"ruleId":"95","severity":1,"message":"99","line":157,"column":15,"nodeType":"97","messageId":"98","endLine":157,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":183,"column":22,"nodeType":"97","messageId":"98","endLine":183,"endColumn":24},{"ruleId":"95","severity":1,"message":"99","line":257,"column":22,"nodeType":"97","messageId":"98","endLine":257,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":272,"column":22,"nodeType":"97","messageId":"98","endLine":272,"endColumn":24},{"ruleId":"95","severity":1,"message":"96","line":328,"column":26,"nodeType":"97","messageId":"98","endLine":328,"endColumn":28},{"ruleId":"95","severity":1,"message":"96","line":421,"column":27,"nodeType":"97","messageId":"98","endLine":421,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":602,"column":85,"nodeType":"97","messageId":"98","endLine":602,"endColumn":87},{"ruleId":"95","severity":1,"message":"96","line":476,"column":42,"nodeType":"97","messageId":"98","endLine":476,"endColumn":44},{"ruleId":"95","severity":1,"message":"96","line":614,"column":83,"nodeType":"97","messageId":"98","endLine":614,"endColumn":85},{"ruleId":"95","severity":1,"message":"96","line":615,"column":85,"nodeType":"97","messageId":"98","endLine":615,"endColumn":87},{"ruleId":"95","severity":1,"message":"96","line":616,"column":83,"nodeType":"97","messageId":"98","endLine":616,"endColumn":85},{"ruleId":"95","severity":1,"message":"96","line":617,"column":82,"nodeType":"97","messageId":"98","endLine":617,"endColumn":84},{"ruleId":"95","severity":1,"message":"96","line":618,"column":84,"nodeType":"97","messageId":"98","endLine":618,"endColumn":86},{"ruleId":"95","severity":1,"message":"96","line":619,"column":84,"nodeType":"97","messageId":"98","endLine":619,"endColumn":86},{"ruleId":"100","severity":1,"message":"101","line":106,"column":17,"nodeType":"102","messageId":"103","endLine":106,"endColumn":82,"fix":"104"},{"ruleId":"95","severity":1,"message":"96","line":20,"column":18,"nodeType":"97","messageId":"98","endLine":20,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":22,"column":18,"nodeType":"97","messageId":"98","endLine":22,"endColumn":20},{"ruleId":"95","severity":1,"message":"96","line":26,"column":25,"nodeType":"97","messageId":"98","endLine":26,"endColumn":27},{"ruleId":"95","severity":1,"message":"99","line":31,"column":38,"nodeType":"97","messageId":"98","endLine":31,"endColumn":40},"no-unused-vars","'ordinal' is assigned a value but never used.","Identifier","unusedVar","'type_names' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"105","text":"106"},[3624,3624]," rel=\"noreferrer\""]